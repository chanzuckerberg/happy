// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.3
// source: hapi/app.proto

package hapi_protos

import (
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	types "github.com/infobloxopen/protoc-gen-gorm/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HappyEnvLaunchType int32

const (
	HappyEnvLaunchType_UNKNOWN HappyEnvLaunchType = 0 // Don't know what it is
	HappyEnvLaunchType_OTHER   HappyEnvLaunchType = 1 // We know, but it's non-standard (specify in `other_launch_type` field)
	HappyEnvLaunchType_EKS     HappyEnvLaunchType = 2 // AWS EKS
	HappyEnvLaunchType_ECS     HappyEnvLaunchType = 3 // AWS ECS
)

// Enum value maps for HappyEnvLaunchType.
var (
	HappyEnvLaunchType_name = map[int32]string{
		0: "UNKNOWN",
		1: "OTHER",
		2: "EKS",
		3: "ECS",
	}
	HappyEnvLaunchType_value = map[string]int32{
		"UNKNOWN": 0,
		"OTHER":   1,
		"EKS":     2,
		"ECS":     3,
	}
)

func (x HappyEnvLaunchType) Enum() *HappyEnvLaunchType {
	p := new(HappyEnvLaunchType)
	*p = x
	return p
}

func (x HappyEnvLaunchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HappyEnvLaunchType) Descriptor() protoreflect.EnumDescriptor {
	return file_hapi_app_proto_enumTypes[0].Descriptor()
}

func (HappyEnvLaunchType) Type() protoreflect.EnumType {
	return &file_hapi_app_proto_enumTypes[0]
}

func (x HappyEnvLaunchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HappyEnvLaunchType.Descriptor instead.
func (HappyEnvLaunchType) EnumDescriptor() ([]byte, []int) {
	return file_hapi_app_proto_rawDescGZIP(), []int{0}
}

type HappyApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *types.UUID            `protobuf:"bytes,1,opt,name=Id,json=id,proto3" json:"Id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,json=created_at,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,json=updated_at,proto3" json:"UpdatedAt,omitempty"`
	Name      string                 `protobuf:"bytes,10,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	RepoSlug  string                 `protobuf:"bytes,11,opt,name=RepoSlug,json=repo_slug,proto3" json:"RepoSlug,omitempty"`
	HappyRoot string                 `protobuf:"bytes,12,opt,name=HappyRoot,json=happy_root,proto3" json:"HappyRoot,omitempty"`
}

func (x *HappyApp) Reset() {
	*x = HappyApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hapi_app_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HappyApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HappyApp) ProtoMessage() {}

func (x *HappyApp) ProtoReflect() protoreflect.Message {
	mi := &file_hapi_app_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HappyApp.ProtoReflect.Descriptor instead.
func (*HappyApp) Descriptor() ([]byte, []int) {
	return file_hapi_app_proto_rawDescGZIP(), []int{0}
}

func (x *HappyApp) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HappyApp) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *HappyApp) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *HappyApp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HappyApp) GetRepoSlug() string {
	if x != nil {
		return x.RepoSlug
	}
	return ""
}

func (x *HappyApp) GetHappyRoot() string {
	if x != nil {
		return x.HappyRoot
	}
	return ""
}

type HappyStack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *types.UUID            `protobuf:"bytes,1,opt,name=Id,json=id,proto3" json:"Id,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,json=created_at,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,json=updated_at,proto3" json:"UpdatedAt,omitempty"`
	Name      string                 `protobuf:"bytes,10,opt,name=Name,json=name,proto3" json:"Name,omitempty"`
	HappyApp  *HappyApp              `protobuf:"bytes,11,opt,name=HappyApp,json=happy_app,proto3" json:"HappyApp,omitempty"`
	HappyEnv  *HappyEnvironment      `protobuf:"bytes,12,opt,name=HappyEnv,json=happy_env,proto3" json:"HappyEnv,omitempty"`
}

func (x *HappyStack) Reset() {
	*x = HappyStack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hapi_app_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HappyStack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HappyStack) ProtoMessage() {}

func (x *HappyStack) ProtoReflect() protoreflect.Message {
	mi := &file_hapi_app_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HappyStack.ProtoReflect.Descriptor instead.
func (*HappyStack) Descriptor() ([]byte, []int) {
	return file_hapi_app_proto_rawDescGZIP(), []int{1}
}

func (x *HappyStack) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HappyStack) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *HappyStack) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *HappyStack) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HappyStack) GetHappyApp() *HappyApp {
	if x != nil {
		return x.HappyApp
	}
	return nil
}

func (x *HappyStack) GetHappyEnv() *HappyEnvironment {
	if x != nil {
		return x.HappyEnv
	}
	return nil
}

// A happy environment that multiple apps can be deployed to
type HappyEnvironment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *types.UUID            `protobuf:"bytes,1,opt,name=Id,json=id,proto3" json:"Id,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,json=created_at,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=UpdatedAt,json=updated_at,proto3" json:"UpdatedAt,omitempty"`
	DeloymentStage string                 `protobuf:"bytes,10,opt,name=DeloymentStage,json=deployment_stage,proto3" json:"DeloymentStage,omitempty"`
	LaunchType     HappyEnvLaunchType     `protobuf:"varint,11,opt,name=LaunchType,json=launch_type,proto3,enum=happy.api.HappyEnvLaunchType" json:"LaunchType,omitempty"`
	// If launch_type == OTHER, specify here
	OtherLaunchType *string `protobuf:"bytes,12,opt,name=OtherLaunchType,json=other_launch_type,proto3,oneof" json:"OtherLaunchType,omitempty"`
	Namespace       string  `protobuf:"bytes,13,opt,name=Namespace,json=namespace,proto3" json:"Namespace,omitempty"`
	ComputeArn      string  `protobuf:"bytes,14,opt,name=ComputeArn,json=compute_arn,proto3" json:"ComputeArn,omitempty"`
}

func (x *HappyEnvironment) Reset() {
	*x = HappyEnvironment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hapi_app_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HappyEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HappyEnvironment) ProtoMessage() {}

func (x *HappyEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_hapi_app_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HappyEnvironment.ProtoReflect.Descriptor instead.
func (*HappyEnvironment) Descriptor() ([]byte, []int) {
	return file_hapi_app_proto_rawDescGZIP(), []int{2}
}

func (x *HappyEnvironment) GetId() *types.UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HappyEnvironment) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *HappyEnvironment) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *HappyEnvironment) GetDeloymentStage() string {
	if x != nil {
		return x.DeloymentStage
	}
	return ""
}

func (x *HappyEnvironment) GetLaunchType() HappyEnvLaunchType {
	if x != nil {
		return x.LaunchType
	}
	return HappyEnvLaunchType_UNKNOWN
}

func (x *HappyEnvironment) GetOtherLaunchType() string {
	if x != nil && x.OtherLaunchType != nil {
		return *x.OtherLaunchType
	}
	return ""
}

func (x *HappyEnvironment) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *HappyEnvironment) GetComputeArn() string {
	if x != nil {
		return x.ComputeArn
	}
	return ""
}

var File_hapi_app_proto protoreflect.FileDescriptor

var file_hapi_app_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x68, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x68, 0x61, 0x70, 0x70, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd1, 0x02, 0x0a, 0x08, 0x48, 0x61, 0x70, 0x70, 0x79, 0x41, 0x70, 0x70,
	0x12, 0x45, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67,
	0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x42, 0x23,
	0xba, 0xb9, 0x19, 0x1f, 0x0a, 0x1d, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x3a, 0x11,
	0x67, 0x65, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x28,
	0x29, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x43, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x12, 0x1c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6f, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x27, 0x0a, 0x09, 0x48, 0x61, 0x70, 0x70, 0x79, 0x52,
	0x6f, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a,
	0x02, 0x40, 0x01, 0x52, 0x0a, 0x68, 0x61, 0x70, 0x70, 0x79, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x3a,
	0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x8f, 0x03, 0x0a, 0x0a, 0x48, 0x61, 0x70, 0x70,
	0x79, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x45, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72, 0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x42, 0x23, 0xba, 0xb9, 0x19, 0x1f, 0x0a, 0x1d, 0x12, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x28, 0x01, 0x3a, 0x11, 0x67, 0x65, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x28, 0x29, 0x40, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xba, 0xb9,
	0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x48, 0x61, 0x70, 0x70, 0x79, 0x41, 0x70,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x48, 0x61, 0x70, 0x70, 0x79, 0x41, 0x70, 0x70, 0x42, 0x0e, 0xba, 0xb9,
	0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0xba, 0xb9, 0x19, 0x02, 0x22, 0x00, 0x52, 0x09, 0x68, 0x61,
	0x70, 0x70, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x12, 0x48, 0x0a, 0x08, 0x48, 0x61, 0x70, 0x70, 0x79,
	0x45, 0x6e, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x61, 0x70, 0x70,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x61, 0x70, 0x70, 0x79, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01,
	0xba, 0xb9, 0x19, 0x02, 0x22, 0x00, 0x52, 0x09, 0x68, 0x61, 0x70, 0x70, 0x79, 0x5f, 0x65, 0x6e,
	0x76, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0x8b, 0x04, 0x0a, 0x10, 0x48, 0x61,
	0x70, 0x70, 0x79, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x72,
	0x6d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x42, 0x23, 0xba, 0xb9,
	0x19, 0x1f, 0x0a, 0x1d, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x28, 0x01, 0x3a, 0x11, 0x67, 0x65,
	0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x28, 0x29, 0x40,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a,
	0x02, 0x40, 0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x12,
	0x32, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40,
	0x01, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x48, 0x61, 0x70, 0x70, 0x79, 0x45, 0x6e, 0x76, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01,
	0x52, 0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x0f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01,
	0x48, 0x00, 0x52, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xb9, 0x19,
	0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x29, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x41, 0x72, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xb9, 0x19, 0x04, 0x0a, 0x02, 0x40, 0x01, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x3a, 0x06, 0xba, 0xb9, 0x19,
	0x02, 0x08, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x2a, 0x3e, 0x0a, 0x12, 0x48, 0x61, 0x70, 0x70, 0x79,
	0x45, 0x6e, 0x76, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4b, 0x53, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x43, 0x53, 0x10, 0x03, 0x42, 0x0f, 0x5a, 0x0d, 0x2e, 0x2f, 0x68, 0x61, 0x70,
	0x69, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hapi_app_proto_rawDescOnce sync.Once
	file_hapi_app_proto_rawDescData = file_hapi_app_proto_rawDesc
)

func file_hapi_app_proto_rawDescGZIP() []byte {
	file_hapi_app_proto_rawDescOnce.Do(func() {
		file_hapi_app_proto_rawDescData = protoimpl.X.CompressGZIP(file_hapi_app_proto_rawDescData)
	})
	return file_hapi_app_proto_rawDescData
}

var file_hapi_app_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_hapi_app_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_hapi_app_proto_goTypes = []interface{}{
	(HappyEnvLaunchType)(0),       // 0: happy.api.HappyEnvLaunchType
	(*HappyApp)(nil),              // 1: happy.api.HappyApp
	(*HappyStack)(nil),            // 2: happy.api.HappyStack
	(*HappyEnvironment)(nil),      // 3: happy.api.HappyEnvironment
	(*types.UUID)(nil),            // 4: gorm.types.UUID
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_hapi_app_proto_depIdxs = []int32{
	4,  // 0: happy.api.HappyApp.Id:type_name -> gorm.types.UUID
	5,  // 1: happy.api.HappyApp.CreatedAt:type_name -> google.protobuf.Timestamp
	5,  // 2: happy.api.HappyApp.UpdatedAt:type_name -> google.protobuf.Timestamp
	4,  // 3: happy.api.HappyStack.Id:type_name -> gorm.types.UUID
	5,  // 4: happy.api.HappyStack.CreatedAt:type_name -> google.protobuf.Timestamp
	5,  // 5: happy.api.HappyStack.UpdatedAt:type_name -> google.protobuf.Timestamp
	1,  // 6: happy.api.HappyStack.HappyApp:type_name -> happy.api.HappyApp
	3,  // 7: happy.api.HappyStack.HappyEnv:type_name -> happy.api.HappyEnvironment
	4,  // 8: happy.api.HappyEnvironment.Id:type_name -> gorm.types.UUID
	5,  // 9: happy.api.HappyEnvironment.CreatedAt:type_name -> google.protobuf.Timestamp
	5,  // 10: happy.api.HappyEnvironment.UpdatedAt:type_name -> google.protobuf.Timestamp
	0,  // 11: happy.api.HappyEnvironment.LaunchType:type_name -> happy.api.HappyEnvLaunchType
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_hapi_app_proto_init() }
func file_hapi_app_proto_init() {
	if File_hapi_app_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hapi_app_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HappyApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hapi_app_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HappyStack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hapi_app_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HappyEnvironment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hapi_app_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hapi_app_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hapi_app_proto_goTypes,
		DependencyIndexes: file_hapi_app_proto_depIdxs,
		EnumInfos:         file_hapi_app_proto_enumTypes,
		MessageInfos:      file_hapi_app_proto_msgTypes,
	}.Build()
	File_hapi_app_proto = out.File
	file_hapi_app_proto_rawDesc = nil
	file_hapi_app_proto_goTypes = nil
	file_hapi_app_proto_depIdxs = nil
}
