package hapi_protos

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	types "github.com/infobloxopen/protoc-gen-gorm/types"
	go_uuid "github.com/satori/go.uuid"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	gorm "gorm.io/gorm"
	strings "strings"
	time "time"
)

type EventORM struct {
	Actor        *string
	Data         string
	DataType     string
	Description  *string
	EventType    string
	HappyEventId *go_uuid.UUID
	OccurredAt   *time.Time
	SourceId     string
	SourceSystem string
	Url          *string
}

// TableName overrides the default tablename generated by GORM
func (EventORM) TableName() string {
	return "events"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Event) ToORM(ctx context.Context) (EventORM, error) {
	to := EventORM{}
	var err error
	if prehook, ok := interface{}(m).(EventWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.EventType = m.EventType
	to.SourceSystem = m.SourceSystem
	to.SourceId = m.SourceId
	if m.OccurredAt != nil {
		t := m.OccurredAt.AsTime()
		to.OccurredAt = &t
	}
	to.Description = m.Description
	to.Actor = m.Actor
	to.Url = m.Url
	to.DataType = m.DataType
	to.Data = m.Data
	if posthook, ok := interface{}(m).(EventWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *EventORM) ToPB(ctx context.Context) (Event, error) {
	to := Event{}
	var err error
	if prehook, ok := interface{}(m).(EventWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.EventType = m.EventType
	to.SourceSystem = m.SourceSystem
	to.SourceId = m.SourceId
	if m.OccurredAt != nil {
		to.OccurredAt = timestamppb.New(*m.OccurredAt)
	}
	to.Description = m.Description
	to.Actor = m.Actor
	to.Url = m.Url
	to.DataType = m.DataType
	to.Data = m.Data
	if posthook, ok := interface{}(m).(EventWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Event the arg will be the target, the caller the one being converted from

// EventBeforeToORM called before default ToORM code
type EventWithBeforeToORM interface {
	BeforeToORM(context.Context, *EventORM) error
}

// EventAfterToORM called after default ToORM code
type EventWithAfterToORM interface {
	AfterToORM(context.Context, *EventORM) error
}

// EventBeforeToPB called before default ToPB code
type EventWithBeforeToPB interface {
	BeforeToPB(context.Context, *Event) error
}

// EventAfterToPB called after default ToPB code
type EventWithAfterToPB interface {
	AfterToPB(context.Context, *Event) error
}

type HappyEventORM struct {
	CreatedAt    *time.Time     `gorm:"not null"`
	Event        *EventORM      `gorm:"type:jsonb;not null;foreignKey:HappyEventId;references:Id"`
	HappyStack   *HappyStackORM `gorm:"not null;foreignKey:HappyStackId;references:Id"`
	HappyStackId *go_uuid.UUID
	Id           go_uuid.UUID `gorm:"type:uuid;primaryKey;default:gen_random_uuid();not null"`
	UpdatedAt    *time.Time   `gorm:"not null"`
}

// TableName overrides the default tablename generated by GORM
func (HappyEventORM) TableName() string {
	return "happy_events"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *HappyEvent) ToORM(ctx context.Context) (HappyEventORM, error) {
	to := HappyEventORM{}
	var err error
	if prehook, ok := interface{}(m).(HappyEventWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id, err = go_uuid.FromString(m.Id.Value)
		if err != nil {
			return to, err
		}
	} else {
		to.Id = go_uuid.Nil
	}
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if m.HappyStack != nil {
		tempHappyStack, err := m.HappyStack.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.HappyStack = &tempHappyStack
	}
	if m.Event != nil {
		tempEvent, err := m.Event.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Event = &tempEvent
	}
	if posthook, ok := interface{}(m).(HappyEventWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *HappyEventORM) ToPB(ctx context.Context) (HappyEvent, error) {
	to := HappyEvent{}
	var err error
	if prehook, ok := interface{}(m).(HappyEventWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = &types.UUID{Value: m.Id.String()}
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if m.HappyStack != nil {
		tempHappyStack, err := m.HappyStack.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.HappyStack = &tempHappyStack
	}
	if m.Event != nil {
		tempEvent, err := m.Event.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Event = &tempEvent
	}
	if posthook, ok := interface{}(m).(HappyEventWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type HappyEvent the arg will be the target, the caller the one being converted from

// HappyEventBeforeToORM called before default ToORM code
type HappyEventWithBeforeToORM interface {
	BeforeToORM(context.Context, *HappyEventORM) error
}

// HappyEventAfterToORM called after default ToORM code
type HappyEventWithAfterToORM interface {
	AfterToORM(context.Context, *HappyEventORM) error
}

// HappyEventBeforeToPB called before default ToPB code
type HappyEventWithBeforeToPB interface {
	BeforeToPB(context.Context, *HappyEvent) error
}

// HappyEventAfterToPB called after default ToPB code
type HappyEventWithAfterToPB interface {
	AfterToPB(context.Context, *HappyEvent) error
}

// DefaultCreateEvent executes a basic gorm create call
func DefaultCreateEvent(ctx context.Context, in *Event, db *gorm.DB) (*Event, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type EventORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EventORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

// DefaultApplyFieldMaskEvent patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskEvent(ctx context.Context, patchee *Event, patcher *Event, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Event, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedOccurredAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"EventType" {
			patchee.EventType = patcher.EventType
			continue
		}
		if f == prefix+"SourceSystem" {
			patchee.SourceSystem = patcher.SourceSystem
			continue
		}
		if f == prefix+"SourceId" {
			patchee.SourceId = patcher.SourceId
			continue
		}
		if !updatedOccurredAt && strings.HasPrefix(f, prefix+"OccurredAt.") {
			if patcher.OccurredAt == nil {
				patchee.OccurredAt = nil
				continue
			}
			if patchee.OccurredAt == nil {
				patchee.OccurredAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"OccurredAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.OccurredAt, patchee.OccurredAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"OccurredAt" {
			updatedOccurredAt = true
			patchee.OccurredAt = patcher.OccurredAt
			continue
		}
		if f == prefix+"Description" {
			patchee.Description = patcher.Description
			continue
		}
		if f == prefix+"Actor" {
			patchee.Actor = patcher.Actor
			continue
		}
		if f == prefix+"Url" {
			patchee.Url = patcher.Url
			continue
		}
		if f == prefix+"DataType" {
			patchee.DataType = patcher.DataType
			continue
		}
		if f == prefix+"Data" {
			patchee.Data = patcher.Data
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListEvent executes a gorm list call
func DefaultListEvent(ctx context.Context, db *gorm.DB) ([]*Event, error) {
	in := Event{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []EventORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(EventORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Event{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type EventORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EventORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type EventORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]EventORM) error
}

// DefaultCreateHappyEvent executes a basic gorm create call
func DefaultCreateHappyEvent(ctx context.Context, in *HappyEvent, db *gorm.DB) (*HappyEvent, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HappyEventORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HappyEventORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type HappyEventORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HappyEventORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadHappyEvent(ctx context.Context, in *HappyEvent, db *gorm.DB) (*HappyEvent, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(HappyEventORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(HappyEventORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := HappyEventORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(HappyEventORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type HappyEventORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HappyEventORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HappyEventORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteHappyEvent(ctx context.Context, in *HappyEvent, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == go_uuid.Nil {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(HappyEventORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&HappyEventORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(HappyEventORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type HappyEventORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HappyEventORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteHappyEventSet(ctx context.Context, in []*HappyEvent, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []go_uuid.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == go_uuid.Nil {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&HappyEventORM{})).(HappyEventORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&HappyEventORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&HappyEventORM{})).(HappyEventORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type HappyEventORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*HappyEvent, *gorm.DB) (*gorm.DB, error)
}
type HappyEventORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*HappyEvent, *gorm.DB) error
}

// DefaultStrictUpdateHappyEvent clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateHappyEvent(ctx context.Context, in *HappyEvent, db *gorm.DB) (*HappyEvent, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateHappyEvent")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &HappyEventORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(HappyEventORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterEvent := EventORM{}
	if ormObj.Id == go_uuid.Nil {
		return nil, errors.EmptyIdError
	}
	filterEvent.HappyEventId = new(go_uuid.UUID)
	*filterEvent.HappyEventId = ormObj.Id
	if err = db.Where(filterEvent).Delete(EventORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HappyEventORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Omit().Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HappyEventORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type HappyEventORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HappyEventORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HappyEventORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchHappyEvent executes a basic gorm update call with patch behavior
func DefaultPatchHappyEvent(ctx context.Context, in *HappyEvent, updateMask *field_mask.FieldMask, db *gorm.DB) (*HappyEvent, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj HappyEvent
	var err error
	if hook, ok := interface{}(&pbObj).(HappyEventWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadHappyEvent(ctx, &HappyEvent{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(HappyEventWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskHappyEvent(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(HappyEventWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateHappyEvent(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(HappyEventWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type HappyEventWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *HappyEvent, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type HappyEventWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *HappyEvent, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type HappyEventWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *HappyEvent, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type HappyEventWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *HappyEvent, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetHappyEvent executes a bulk gorm update call with patch behavior
func DefaultPatchSetHappyEvent(ctx context.Context, objects []*HappyEvent, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*HappyEvent, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*HappyEvent, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchHappyEvent(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskHappyEvent patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskHappyEvent(ctx context.Context, patchee *HappyEvent, patcher *HappyEvent, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*HappyEvent, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	var updatedHappyStack bool
	var updatedEvent bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
		if !updatedHappyStack && strings.HasPrefix(f, prefix+"HappyStack.") {
			updatedHappyStack = true
			if patcher.HappyStack == nil {
				patchee.HappyStack = nil
				continue
			}
			if patchee.HappyStack == nil {
				patchee.HappyStack = &HappyStack{}
			}
			if o, err := DefaultApplyFieldMaskHappyStack(ctx, patchee.HappyStack, patcher.HappyStack, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"HappyStack.", db); err != nil {
				return nil, err
			} else {
				patchee.HappyStack = o
			}
			continue
		}
		if f == prefix+"HappyStack" {
			updatedHappyStack = true
			patchee.HappyStack = patcher.HappyStack
			continue
		}
		if !updatedEvent && strings.HasPrefix(f, prefix+"Event.") {
			updatedEvent = true
			if patcher.Event == nil {
				patchee.Event = nil
				continue
			}
			if patchee.Event == nil {
				patchee.Event = &Event{}
			}
			if o, err := DefaultApplyFieldMaskEvent(ctx, patchee.Event, patcher.Event, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Event.", db); err != nil {
				return nil, err
			} else {
				patchee.Event = o
			}
			continue
		}
		if f == prefix+"Event" {
			updatedEvent = true
			patchee.Event = patcher.Event
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListHappyEvent executes a gorm list call
func DefaultListHappyEvent(ctx context.Context, db *gorm.DB) ([]*HappyEvent, error) {
	in := HappyEvent{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HappyEventORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(HappyEventORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []HappyEventORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(HappyEventORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*HappyEvent{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type HappyEventORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HappyEventORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type HappyEventORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]HappyEventORM) error
}
