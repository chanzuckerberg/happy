// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chanzuckerberg/happy/cli/pkg/workspace_repo (interfaces: Workspace)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	options "github.com/chanzuckerberg/happy/cli/pkg/options"
	opts "github.com/chanzuckerberg/happy/shared/opts"
	util "github.com/chanzuckerberg/happy/shared/util"
	gomock "github.com/golang/mock/gomock"
	tfe "github.com/hashicorp/go-tfe"
)

// MockWorkspace is a mock of Workspace interface.
type MockWorkspace struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceMockRecorder
}

// MockWorkspaceMockRecorder is the mock recorder for MockWorkspace.
type MockWorkspaceMockRecorder struct {
	mock *MockWorkspace
}

// NewMockWorkspace creates a new mock instance.
func NewMockWorkspace(ctrl *gomock.Controller) *MockWorkspace {
	mock := &MockWorkspace{ctrl: ctrl}
	mock.recorder = &MockWorkspaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspace) EXPECT() *MockWorkspaceMockRecorder {
	return m.recorder
}

// DiscardRun mocks base method.
func (m *MockWorkspace) DiscardRun(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscardRun", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DiscardRun indicates an expected call of DiscardRun.
func (mr *MockWorkspaceMockRecorder) DiscardRun(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscardRun", reflect.TypeOf((*MockWorkspace)(nil).DiscardRun), arg0, arg1)
}

// GetCurrentRunID mocks base method.
func (m *MockWorkspace) GetCurrentRunID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentRunID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentRunID indicates an expected call of GetCurrentRunID.
func (mr *MockWorkspaceMockRecorder) GetCurrentRunID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRunID", reflect.TypeOf((*MockWorkspace)(nil).GetCurrentRunID))
}

// GetCurrentRunStatus mocks base method.
func (m *MockWorkspace) GetCurrentRunStatus(arg0 context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentRunStatus", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentRunStatus indicates an expected call of GetCurrentRunStatus.
func (mr *MockWorkspaceMockRecorder) GetCurrentRunStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentRunStatus", reflect.TypeOf((*MockWorkspace)(nil).GetCurrentRunStatus), arg0)
}

// GetLatestConfigVersionID mocks base method.
func (m *MockWorkspace) GetLatestConfigVersionID(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestConfigVersionID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestConfigVersionID indicates an expected call of GetLatestConfigVersionID.
func (mr *MockWorkspaceMockRecorder) GetLatestConfigVersionID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestConfigVersionID", reflect.TypeOf((*MockWorkspace)(nil).GetLatestConfigVersionID), arg0)
}

// GetOutputs mocks base method.
func (m *MockWorkspace) GetOutputs(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputs", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutputs indicates an expected call of GetOutputs.
func (mr *MockWorkspaceMockRecorder) GetOutputs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputs", reflect.TypeOf((*MockWorkspace)(nil).GetOutputs), arg0)
}

// GetResources mocks base method.
func (m *MockWorkspace) GetResources(arg0 context.Context) ([]util.ManagedResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResources", arg0)
	ret0, _ := ret[0].([]util.ManagedResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResources indicates an expected call of GetResources.
func (mr *MockWorkspaceMockRecorder) GetResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockWorkspace)(nil).GetResources), arg0)
}

// GetTags mocks base method.
func (m *MockWorkspace) GetTags(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockWorkspaceMockRecorder) GetTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockWorkspace)(nil).GetTags), arg0)
}

// GetWorkspaceID mocks base method.
func (m *MockWorkspace) GetWorkspaceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspaceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWorkspaceID indicates an expected call of GetWorkspaceID.
func (mr *MockWorkspaceMockRecorder) GetWorkspaceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspaceID", reflect.TypeOf((*MockWorkspace)(nil).GetWorkspaceID))
}

// HasState mocks base method.
func (m *MockWorkspace) HasState(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasState", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasState indicates an expected call of HasState.
func (mr *MockWorkspaceMockRecorder) HasState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasState", reflect.TypeOf((*MockWorkspace)(nil).HasState), arg0)
}

// ResetCache mocks base method.
func (m *MockWorkspace) ResetCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetCache")
}

// ResetCache indicates an expected call of ResetCache.
func (mr *MockWorkspaceMockRecorder) ResetCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetCache", reflect.TypeOf((*MockWorkspace)(nil).ResetCache))
}

// Run mocks base method.
func (m *MockWorkspace) Run(arg0 context.Context, arg1 ...opts.RunOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockWorkspaceMockRecorder) Run(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWorkspace)(nil).Run), varargs...)
}

// RunConfigVersion mocks base method.
func (m *MockWorkspace) RunConfigVersion(arg0 context.Context, arg1 string, arg2 ...opts.RunOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunConfigVersion", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunConfigVersion indicates an expected call of RunConfigVersion.
func (mr *MockWorkspaceMockRecorder) RunConfigVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunConfigVersion", reflect.TypeOf((*MockWorkspace)(nil).RunConfigVersion), varargs...)
}

// SetClient mocks base method.
func (m *MockWorkspace) SetClient(arg0 *tfe.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", arg0)
}

// SetClient indicates an expected call of SetClient.
func (mr *MockWorkspaceMockRecorder) SetClient(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockWorkspace)(nil).SetClient), arg0)
}

// SetOutputs mocks base method.
func (m *MockWorkspace) SetOutputs(arg0 map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOutputs", arg0)
}

// SetOutputs indicates an expected call of SetOutputs.
func (mr *MockWorkspaceMockRecorder) SetOutputs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOutputs", reflect.TypeOf((*MockWorkspace)(nil).SetOutputs), arg0)
}

// SetVars mocks base method.
func (m *MockWorkspace) SetVars(arg0 context.Context, arg1, arg2, arg3 string, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVars", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVars indicates an expected call of SetVars.
func (mr *MockWorkspaceMockRecorder) SetVars(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVars", reflect.TypeOf((*MockWorkspace)(nil).SetVars), arg0, arg1, arg2, arg3, arg4)
}

// SetWorkspace mocks base method.
func (m *MockWorkspace) SetWorkspace(arg0 *tfe.Workspace) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWorkspace", arg0)
}

// SetWorkspace indicates an expected call of SetWorkspace.
func (mr *MockWorkspaceMockRecorder) SetWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWorkspace", reflect.TypeOf((*MockWorkspace)(nil).SetWorkspace), arg0)
}

// UploadVersion mocks base method.
func (m *MockWorkspace) UploadVersion(arg0 context.Context, arg1 string, arg2 ...opts.RunOption) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadVersion", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadVersion indicates an expected call of UploadVersion.
func (mr *MockWorkspaceMockRecorder) UploadVersion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadVersion", reflect.TypeOf((*MockWorkspace)(nil).UploadVersion), varargs...)
}

// Wait mocks base method.
func (m *MockWorkspace) Wait(arg0 context.Context, arg1 ...opts.RunOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Wait", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockWorkspaceMockRecorder) Wait(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockWorkspace)(nil).Wait), varargs...)
}

// WaitWithOptions mocks base method.
func (m *MockWorkspace) WaitWithOptions(arg0 context.Context, arg1 options.WaitOptions, arg2 ...opts.RunOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WaitWithOptions", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitWithOptions indicates an expected call of WaitWithOptions.
func (mr *MockWorkspaceMockRecorder) WaitWithOptions(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitWithOptions", reflect.TypeOf((*MockWorkspace)(nil).WaitWithOptions), varargs...)
}

// WorkspaceName mocks base method.
func (m *MockWorkspace) WorkspaceName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkspaceName")
	ret0, _ := ret[0].(string)
	return ret0
}

// WorkspaceName indicates an expected call of WorkspaceName.
func (mr *MockWorkspaceMockRecorder) WorkspaceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkspaceName", reflect.TypeOf((*MockWorkspace)(nil).WorkspaceName))
}
