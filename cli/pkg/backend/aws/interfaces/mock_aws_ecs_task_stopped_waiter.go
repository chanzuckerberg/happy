// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chanzuckerberg/happy/pkg/cli/backend/aws/interfaces (interfaces: ECSTaskStoppedWaiterAPI)

// Package interfaces is a generated GoMock package.
package interfaces

import (
	context "context"
	reflect "reflect"
	time "time"

	ecs "github.com/aws/aws-sdk-go-v2/service/ecs"
	gomock "github.com/golang/mock/gomock"
)

// MockECSTaskStoppedWaiterAPI is a mock of ECSTaskStoppedWaiterAPI interface.
type MockECSTaskStoppedWaiterAPI struct {
	ctrl     *gomock.Controller
	recorder *MockECSTaskStoppedWaiterAPIMockRecorder
}

// MockECSTaskStoppedWaiterAPIMockRecorder is the mock recorder for MockECSTaskStoppedWaiterAPI.
type MockECSTaskStoppedWaiterAPIMockRecorder struct {
	mock *MockECSTaskStoppedWaiterAPI
}

// NewMockECSTaskStoppedWaiterAPI creates a new mock instance.
func NewMockECSTaskStoppedWaiterAPI(ctrl *gomock.Controller) *MockECSTaskStoppedWaiterAPI {
	mock := &MockECSTaskStoppedWaiterAPI{ctrl: ctrl}
	mock.recorder = &MockECSTaskStoppedWaiterAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECSTaskStoppedWaiterAPI) EXPECT() *MockECSTaskStoppedWaiterAPIMockRecorder {
	return m.recorder
}

// Wait mocks base method.
func (m *MockECSTaskStoppedWaiterAPI) Wait(arg0 context.Context, arg1 *ecs.DescribeTasksInput, arg2 time.Duration, arg3 ...func(*ecs.TasksStoppedWaiterOptions)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Wait", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockECSTaskStoppedWaiterAPIMockRecorder) Wait(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockECSTaskStoppedWaiterAPI)(nil).Wait), varargs...)
}
