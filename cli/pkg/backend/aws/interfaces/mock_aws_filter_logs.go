// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chanzuckerberg/happy/pkg/backend/aws/interfaces (interfaces: FilterLogEventsAPIClient)

// Package interfaces is a generated GoMock package.
package interfaces

import (
	context "context"
	reflect "reflect"

	cloudwatchlogs "github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs"
	gomock "github.com/golang/mock/gomock"
)

// MockFilterLogEventsAPIClient is a mock of FilterLogEventsAPIClient interface.
type MockFilterLogEventsAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockFilterLogEventsAPIClientMockRecorder
}

// MockFilterLogEventsAPIClientMockRecorder is the mock recorder for MockFilterLogEventsAPIClient.
type MockFilterLogEventsAPIClientMockRecorder struct {
	mock *MockFilterLogEventsAPIClient
}

// NewMockFilterLogEventsAPIClient creates a new mock instance.
func NewMockFilterLogEventsAPIClient(ctrl *gomock.Controller) *MockFilterLogEventsAPIClient {
	mock := &MockFilterLogEventsAPIClient{ctrl: ctrl}
	mock.recorder = &MockFilterLogEventsAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilterLogEventsAPIClient) EXPECT() *MockFilterLogEventsAPIClientMockRecorder {
	return m.recorder
}

// FilterLogEvents mocks base method.
func (m *MockFilterLogEventsAPIClient) FilterLogEvents(arg0 context.Context, arg1 *cloudwatchlogs.FilterLogEventsInput, arg2 ...func(*cloudwatchlogs.Options)) (*cloudwatchlogs.FilterLogEventsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilterLogEvents", varargs...)
	ret0, _ := ret[0].(*cloudwatchlogs.FilterLogEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterLogEvents indicates an expected call of FilterLogEvents.
func (mr *MockFilterLogEventsAPIClientMockRecorder) FilterLogEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterLogEvents", reflect.TypeOf((*MockFilterLogEventsAPIClient)(nil).FilterLogEvents), varargs...)
}
