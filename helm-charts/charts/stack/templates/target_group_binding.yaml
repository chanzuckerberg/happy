{{ $global := . }}

{{- range $key, $value := .Values.services }}
{{- $fullServiceName := printf "%s-%s" $global.Values.stackName $value.name | trunc 63 | trimSuffix "-" }}
{{- $service := dict "Values" $global.Values "service" $value -}}
{{ if eq $value.routing.serviceType "TARGET_GROUP_ONLY" }}
apiVersion: elbv2.k8s.aws/v1beta1
kind: TargetGroupBinding
metadata:
  name: {{ $fullServiceName }}
  {{- include "stack.labels" $global | nindent 4 }}
  labels:
  {{- include "service.labels" $fullServiceName | nindent 4 }}
  {{- include "stack.labels" $global | nindent 4 }}
spec:
  ipAddressType: ipv4
  networking:
    ingress:
    - from:
      - securityGroup:
          groupID: {{ required ".Values.services[].routing.alb.securityGroup is required" $service.routing.alb.securityGroup }}
      ports:
      - protocol: TCP
  serviceRef:
    name: {{ $fullServiceName }}
    port: {{ $service.routing.port }}
  targetGroupARN: {{ required ".Values.services[].routing.alb.targetGroupArn is required" $service.routing.alb.targetGroupArn }} 
  targetType: instance
{{- end }}
{{- end }}



# resource "kubernetes_manifest" "this" {
#   count = var.routing.service_type == "TARGET_GROUP_ONLY" ? 1 : 0

#   manifest = {
#     apiVersion = "elbv2.k8s.aws/v1beta1"
#     kind       = "TargetGroupBinding"

#     metadata = {
#       name      = random_pet.this.keepers.target_group_name
#       namespace = var.k8s_namespace

#     }

#     spec = {
#       serviceRef = {
#         name = var.routing.service_name
#         port = var.routing.service_port
#       }
#       targetGroupARN = aws_lb_target_group.this[0].arn
#       networking = {
#         ingress = [{
#           from = [for sg_id in data.aws_lb.this[0].security_groups : { securityGroup = { groupID = sg_id } }]
#           ports = [{
#             protocol = "TCP"
#           }]
#         }]
#       }
#     }
#   }
# }