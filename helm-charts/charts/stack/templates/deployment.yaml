{{ $global := . }}
{{- range $key, $value := .Values.services }}
{{- $fullServiceName := printf "%s-%s" $global.Values.stackName $value.name | trunc 63 | trimSuffix "-" }}
{{ if ne $value.routing.serviceType "IMAGE_TEMPLATE" }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullServiceName }}
  labels:
  {{- include "service.labels" $fullServiceName | nindent 4 }}
  {{- include "stack.labels" $global | nindent 4 }}
  annotations:
    {{- if eq $global.Values.datadog.enabled true }}
    ad.datadoghq.com/tags: '{"deployment_stage":"{{ $global.deploymentStage }}","env":"{{ $global.deploymentStage }}","happy_compute":"eks","happy_service":"{{ $fullServiceName }}","happy_stack":"{{ include "stack.name" $global }}","managedby":"happy","owner":"{{ $global.Values.aws.tags.owner }}","project":"{{ $global.Values.aws.tags.project }}","service":"{{ $global.Values.aws.tags.service }}"}'
    {{- end }}
    linkerd.io/inject: {{ if eq $global.Values.serviceMesh.enabled true }}enabled{{ else }}disabled{{ end }}
spec:
  replicas: {{ $value.scaling.desiredCount }}
  selector:
    matchLabels:
      app: {{ $fullServiceName }}
  template:
    metadata:
      labels:
        {{- include "service.labels" $fullServiceName | nindent 8 }}
        {{- include "stack.labels" $global | nindent 8 }}
      annotations:
        {{- if eq $global.Values.datadog.enabled true }}
        ad.datadoghq.com/tags: '{"deployment_stage":"{{ $global.deploymentStage }}","env":"{{ $global.deploymentStage }}","happy_compute":"eks","happy_service":"{{ $fullServiceName }}","happy_stack":"{{ include "stack.name" $global }}","managedby":"happy","owner":"{{ $global.Values.aws.tags.owner }}","project":"{{ $global.Values.aws.tags.project }}","service":"{{ $global.Values.aws.tags.service }}"}'
        {{- end }}
        {{ if eq $global.Values.serviceMesh.enabled true -}}
        config.linkerd.io/default-inbound-policy: all-authenticated
        config.linkerd.io/skip-outbound-ports: 25,587,3306,4444,4567,4568,5432,6379,9300,11211
        linkerd.io/inject: enabled
        {{- else }}{{ end }}
    spec:
      automountServiceAccountToken: true
      topologySpreadConstraint:
      - maxSkew: 3
        minDomains: 3
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: {{ $fullServiceName }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - {{ $value.image.platformArchitecture }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: {{ $fullServiceName }}
              topologyKey: kubernetes.io/hostname
            weight: 49
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: {{ $fullServiceName }}
              topologyKey: topology.kubernetes.io/zone
            weight: 51
      containers:
      - env: {{- $value.env.additionalEnvVars| default list | toYaml | nindent 10 }}
        envFrom: {{- (concat $value.env.additionalEnvVarsFromConfigMaps $value.env.additionalEnvVarsFromSecrets) | default list | toYaml | nindent 10}}
        image: {{ required ".Values.services[].image.repository required" $value.image.repository }}:{{ required ".Values.services[].image.tag required" $value.image.tag }}
        imagePullPolicy: {{ $value.image.pullPolicy | default "IfNotPresent" | quote }}
        name: {{ $value.name | quote }}
        ports:
        - containerPort: {{ $value.routing.port | int }}
          name: http
          protocol: TCP
        {{- include "container.probes" $value | nindent 8 }}
        resources: {{- toYaml $value.resources | nindent 10 }}
        volumeMounts:
        {{- $intSecretVM := get ((include "happy.intSecretVolumeMount" .) | fromYaml) "anchor" }}
        {{- (concat $intSecretVM $value.volumes.additionalVolumesFromSecrets $value.volumes.additionalVolumesFromConfigMaps) | toYaml | nindent 10 }}
      {{- range $k, $v := $value.sidecars }}
      - name: {{ $v.name }}
        image: {{ required ".Values.services[].sidecars[].image.repository required" $v.image.repository }}:{{ required ".Values.services[].sidecars[].image.tag required" $v.image.tag }}
        imagePullPolicy: {{ $v.image.pullPolicy | default "IfNotPresent" | quote }}
        ports:
        - containerPort: {{ $v.port | int }}
          name: http
          protocol: TCP
        {{- include "container.probes" $v | nindent 8 }}
        resources: {{- toYaml $v.resources | nindent 10 }}
        volumeMounts:
        {{- $intSecretVM := get ((include "happy.intSecretVolumeMount" .) | fromYaml) "anchor" }}
        {{- (concat $intSecretVM $value.volumes.additionalVolumesFromSecrets $value.volumes.additionalVolumesFromConfigMaps) | toYaml | nindent 10}}
        {{- $env := list (dict "name" "DEPLOYMENT_STAGE" "value" $global.Values.deploymentStage) (dict "name" "AWS_REGION" "value" $global.Values.aws.region) (dict "name" "AWS_DEFAULT_REGION" "value" $global.Values.aws.region) (dict "name" "HAPPY_STACK" "value" $global.Values.stackName) (dict "name" "HAPPY_SERVICE" "value" $v.name) }}
        {{- $combinedEnv := concat $env $value.env.additionalEnvVars }}
        env: {{- $combinedEnv | default list | toYaml | nindent 10 }}
        envFrom: {{- (concat $value.env.additionalEnvVarsFromConfigMaps $value.env.additionalEnvVarsFromSecrets) | default list | toYaml | nindent 10 }}
      {{- end }}
      nodeSelector: 
      {{- toYaml (merge $value.additionalNodeSelectors (dict "kubernetes.io/arch" $value.image.platformArchitecture)) | nindent 8 }}
      restartPolicy: Always
      serviceAccountName: {{ $fullServiceName }}
      volumes:
      {{- range $k, $v := $value.volumes.additionalVolumesFromConfigMaps }}
      - name: {{ $v.name }}
        configMap:
          name: {{ $v.name }}
      {{- end}}
      {{- range $k, $v := $value.volumes.additionalVolumesFromSecrets }}
      - name: {{ $v.name }}
        secret:
          name: {{ $v.name }}
      {{- end}}
      - name: integration-secret
        secret:
          secretName: integration-secret
{{- end }}
{{- end }}