// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chanzuckerberg/happy-deploy/pkg/workspace_repo (interfaces: WorkspaceRepoIface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	workspace_repo "github.com/chanzuckerberg/happy-deploy/pkg/workspace_repo"
	gomock "github.com/golang/mock/gomock"
)

// MockWorkspaceRepoIface is a mock of WorkspaceRepoIface interface.
type MockWorkspaceRepoIface struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceRepoIfaceMockRecorder
}

// MockWorkspaceRepoIfaceMockRecorder is the mock recorder for MockWorkspaceRepoIface.
type MockWorkspaceRepoIfaceMockRecorder struct {
	mock *MockWorkspaceRepoIface
}

// NewMockWorkspaceRepoIface creates a new mock instance.
func NewMockWorkspaceRepoIface(ctrl *gomock.Controller) *MockWorkspaceRepoIface {
	mock := &MockWorkspaceRepoIface{ctrl: ctrl}
	mock.recorder = &MockWorkspaceRepoIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceRepoIface) EXPECT() *MockWorkspaceRepoIfaceMockRecorder {
	return m.recorder
}

// GetWorkspace mocks base method.
func (m *MockWorkspaceRepoIface) GetWorkspace(arg0 string) (workspace_repo.Workspace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkspace", arg0)
	ret0, _ := ret[0].(workspace_repo.Workspace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkspace indicates an expected call of GetWorkspace.
func (mr *MockWorkspaceRepoIfaceMockRecorder) GetWorkspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkspace", reflect.TypeOf((*MockWorkspaceRepoIface)(nil).GetWorkspace), arg0)
}
