// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chanzuckerberg/happy-deploy/pkg/backend (interfaces: ParamStoreBackend)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockParamStoreBackend is a mock of ParamStoreBackend interface.
type MockParamStoreBackend struct {
	ctrl     *gomock.Controller
	recorder *MockParamStoreBackendMockRecorder
}

// MockParamStoreBackendMockRecorder is the mock recorder for MockParamStoreBackend.
type MockParamStoreBackendMockRecorder struct {
	mock *MockParamStoreBackend
}

// NewMockParamStoreBackend creates a new mock instance.
func NewMockParamStoreBackend(ctrl *gomock.Controller) *MockParamStoreBackend {
	mock := &MockParamStoreBackend{ctrl: ctrl}
	mock.recorder = &MockParamStoreBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParamStoreBackend) EXPECT() *MockParamStoreBackendMockRecorder {
	return m.recorder
}

// AddParams mocks base method.
func (m *MockParamStoreBackend) AddParams(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddParams", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddParams indicates an expected call of AddParams.
func (mr *MockParamStoreBackendMockRecorder) AddParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddParams", reflect.TypeOf((*MockParamStoreBackend)(nil).AddParams), arg0, arg1)
}

// GetParameter mocks base method.
func (m *MockParamStoreBackend) GetParameter(arg0 string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParameter", arg0)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParameter indicates an expected call of GetParameter.
func (mr *MockParamStoreBackendMockRecorder) GetParameter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParameter", reflect.TypeOf((*MockParamStoreBackend)(nil).GetParameter), arg0)
}
