// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chanzuckerberg/happy/shared/backend/aws/interfaces (interfaces: ComputeBackend)

// Package interfaces is a generated GoMock package.
package interfaces

import (
	context "context"
	reflect "reflect"

	config "github.com/chanzuckerberg/happy/shared/config"
	util "github.com/chanzuckerberg/happy/shared/util"
	gomock "github.com/golang/mock/gomock"
)

// MockComputeBackend is a mock of ComputeBackend interface.
type MockComputeBackend struct {
	ctrl     *gomock.Controller
	recorder *MockComputeBackendMockRecorder
}

// MockComputeBackendMockRecorder is the mock recorder for MockComputeBackend.
type MockComputeBackendMockRecorder struct {
	mock *MockComputeBackend
}

// NewMockComputeBackend creates a new mock instance.
func NewMockComputeBackend(ctrl *gomock.Controller) *MockComputeBackend {
	mock := &MockComputeBackend{ctrl: ctrl}
	mock.recorder = &MockComputeBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComputeBackend) EXPECT() *MockComputeBackendMockRecorder {
	return m.recorder
}

// Describe mocks base method.
func (m *MockComputeBackend) Describe(arg0 context.Context, arg1, arg2 string) (StackServiceDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Describe", arg0, arg1, arg2)
	ret0, _ := ret[0].(StackServiceDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Describe indicates an expected call of Describe.
func (mr *MockComputeBackendMockRecorder) Describe(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockComputeBackend)(nil).Describe), arg0, arg1, arg2)
}

// GetEvents mocks base method.
func (m *MockComputeBackend) GetEvents(arg0 context.Context, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockComputeBackendMockRecorder) GetEvents(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockComputeBackend)(nil).GetEvents), arg0, arg1, arg2)
}

// GetIntegrationSecret mocks base method.
func (m *MockComputeBackend) GetIntegrationSecret(arg0 context.Context) (*config.IntegrationSecret, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIntegrationSecret", arg0)
	ret0, _ := ret[0].(*config.IntegrationSecret)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIntegrationSecret indicates an expected call of GetIntegrationSecret.
func (mr *MockComputeBackendMockRecorder) GetIntegrationSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIntegrationSecret", reflect.TypeOf((*MockComputeBackend)(nil).GetIntegrationSecret), arg0)
}

// GetParam mocks base method.
func (m *MockComputeBackend) GetParam(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParam", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParam indicates an expected call of GetParam.
func (mr *MockComputeBackendMockRecorder) GetParam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParam", reflect.TypeOf((*MockComputeBackend)(nil).GetParam), arg0, arg1)
}

// GetResources mocks base method.
func (m *MockComputeBackend) GetResources(arg0 context.Context, arg1 string) ([]util.ManagedResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResources", arg0, arg1)
	ret0, _ := ret[0].([]util.ManagedResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResources indicates an expected call of GetResources.
func (mr *MockComputeBackendMockRecorder) GetResources(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockComputeBackend)(nil).GetResources), arg0, arg1)
}

// PrintLogs mocks base method.
func (m *MockComputeBackend) PrintLogs(arg0 context.Context, arg1, arg2 string, arg3 ...util.PrintOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PrintLogs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrintLogs indicates an expected call of PrintLogs.
func (mr *MockComputeBackendMockRecorder) PrintLogs(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintLogs", reflect.TypeOf((*MockComputeBackend)(nil).PrintLogs), varargs...)
}

// RunTask mocks base method.
func (m *MockComputeBackend) RunTask(arg0 context.Context, arg1 string, arg2 util.LaunchType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTask indicates an expected call of RunTask.
func (mr *MockComputeBackendMockRecorder) RunTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTask", reflect.TypeOf((*MockComputeBackend)(nil).RunTask), arg0, arg1, arg2)
}

// Shell mocks base method.
func (m *MockComputeBackend) Shell(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shell", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shell indicates an expected call of Shell.
func (mr *MockComputeBackendMockRecorder) Shell(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shell", reflect.TypeOf((*MockComputeBackend)(nil).Shell), arg0, arg1, arg2)
}

// WriteParam mocks base method.
func (m *MockComputeBackend) WriteParam(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteParam", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteParam indicates an expected call of WriteParam.
func (mr *MockComputeBackendMockRecorder) WriteParam(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteParam", reflect.TypeOf((*MockComputeBackend)(nil).WriteParam), arg0, arg1, arg2)
}
