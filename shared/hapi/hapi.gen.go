// Package hapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package hapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AppConfigListSource.
const (
	Environment AppConfigListSource = "environment"
	Stack       AppConfigListSource = "stack"
)

// AppConfigList defines model for AppConfigList.
type AppConfigList struct {
	AppName     string              `json:"app_name"`
	CreatedAt   time.Time           `json:"created_at"`
	DeletedAt   *time.Time          `json:"deleted_at,omitempty"`
	Environment string              `json:"environment"`
	Id          int64               `json:"id"`
	Key         string              `json:"key"`
	Source      AppConfigListSource `json:"source"`
	Stack       string              `json:"stack"`
	UpdatedAt   time.Time           `json:"updated_at"`
	Value       string              `json:"value"`
}

// AppConfigListSource defines model for AppConfigList.Source.
type AppConfigListSource string

// N400 defines model for 400.
type N400 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// N403 defines model for 403.
type N403 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// N404 defines model for 404.
type N404 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// N409 defines model for 409.
type N409 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// N500 defines model for 500.
type N500 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// ListAppConfigParams defines parameters for ListAppConfig.
type ListAppConfigParams struct {
	// Page what page to render
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage        *int    `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
	AppName             string  `form:"app_name" json:"app_name"`
	Environment         string  `form:"environment" json:"environment"`
	Stack               *string `form:"stack,omitempty" json:"stack,omitempty"`
	AwsProfile          string  `form:"aws_profile" json:"aws_profile"`
	AwsRegion           string  `form:"aws_region" json:"aws_region"`
	K8sNamespace        string  `form:"k8s_namespace" json:"k8s_namespace"`
	K8sClusterId        string  `form:"k8s_cluster_id" json:"k8s_cluster_id"`
	XAwsAccessKeyId     string  `json:"X-Aws-Access-Key-Id"`
	XAwsSecretAccessKey string  `json:"X-Aws-Secret-Access-Key"`
	XAwsSessionToken    string  `json:"X-Aws-Session-Token"`
}

// SetAppConfigJSONBody defines parameters for SetAppConfig.
type SetAppConfigJSONBody struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// SetAppConfigParams defines parameters for SetAppConfig.
type SetAppConfigParams struct {
	// Page what page to render
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage        *int    `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
	AppName             string  `form:"app_name" json:"app_name"`
	Environment         string  `form:"environment" json:"environment"`
	Stack               *string `form:"stack,omitempty" json:"stack,omitempty"`
	AwsProfile          string  `form:"aws_profile" json:"aws_profile"`
	AwsRegion           string  `form:"aws_region" json:"aws_region"`
	K8sNamespace        string  `form:"k8s_namespace" json:"k8s_namespace"`
	K8sClusterId        string  `form:"k8s_cluster_id" json:"k8s_cluster_id"`
	XAwsAccessKeyId     string  `json:"X-Aws-Access-Key-Id"`
	XAwsSecretAccessKey string  `json:"X-Aws-Secret-Access-Key"`
	XAwsSessionToken    string  `json:"X-Aws-Session-Token"`
}

// DeleteAppConfigParams defines parameters for DeleteAppConfig.
type DeleteAppConfigParams struct {
	AppName             string  `form:"app_name" json:"app_name"`
	Environment         string  `form:"environment" json:"environment"`
	Stack               *string `form:"stack,omitempty" json:"stack,omitempty"`
	AwsProfile          string  `form:"aws_profile" json:"aws_profile"`
	AwsRegion           string  `form:"aws_region" json:"aws_region"`
	K8sNamespace        string  `form:"k8s_namespace" json:"k8s_namespace"`
	K8sClusterId        string  `form:"k8s_cluster_id" json:"k8s_cluster_id"`
	XAwsAccessKeyId     string  `json:"X-Aws-Access-Key-Id"`
	XAwsSecretAccessKey string  `json:"X-Aws-Secret-Access-Key"`
	XAwsSessionToken    string  `json:"X-Aws-Session-Token"`
}

// ReadAppConfigParams defines parameters for ReadAppConfig.
type ReadAppConfigParams struct {
	AppName             string  `form:"app_name" json:"app_name"`
	Environment         string  `form:"environment" json:"environment"`
	Stack               *string `form:"stack,omitempty" json:"stack,omitempty"`
	AwsProfile          string  `form:"aws_profile" json:"aws_profile"`
	AwsRegion           string  `form:"aws_region" json:"aws_region"`
	K8sNamespace        string  `form:"k8s_namespace" json:"k8s_namespace"`
	K8sClusterId        string  `form:"k8s_cluster_id" json:"k8s_cluster_id"`
	XAwsAccessKeyId     string  `json:"X-Aws-Access-Key-Id"`
	XAwsSecretAccessKey string  `json:"X-Aws-Secret-Access-Key"`
	XAwsSessionToken    string  `json:"X-Aws-Session-Token"`
}

// SetAppConfigJSONRequestBody defines body for SetAppConfig for application/json ContentType.
type SetAppConfigJSONRequestBody SetAppConfigJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListAppConfig request
	ListAppConfig(ctx context.Context, params *ListAppConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetAppConfigWithBody request with any body
	SetAppConfigWithBody(ctx context.Context, params *SetAppConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetAppConfig(ctx context.Context, params *SetAppConfigParams, body SetAppConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAppConfig request
	DeleteAppConfig(ctx context.Context, key string, params *DeleteAppConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadAppConfig request
	ReadAppConfig(ctx context.Context, key string, params *ReadAppConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Health request
	Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListAppConfig(ctx context.Context, params *ListAppConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAppConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetAppConfigWithBody(ctx context.Context, params *SetAppConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetAppConfigRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetAppConfig(ctx context.Context, params *SetAppConfigParams, body SetAppConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetAppConfigRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAppConfig(ctx context.Context, key string, params *DeleteAppConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAppConfigRequest(c.Server, key, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadAppConfig(ctx context.Context, key string, params *ReadAppConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadAppConfigRequest(c.Server, key, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAppConfigRequest generates requests for ListAppConfig
func NewListAppConfigRequest(server string, params *ListAppConfigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app-configs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_name", runtime.ParamLocationQuery, params.AppName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Stack != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stack", runtime.ParamLocationQuery, *params.Stack); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_profile", runtime.ParamLocationQuery, params.AwsProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_region", runtime.ParamLocationQuery, params.AwsRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_namespace", runtime.ParamLocationQuery, params.K8sNamespace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_cluster_id", runtime.ParamLocationQuery, params.K8sClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Access-Key-Id", runtime.ParamLocationHeader, params.XAwsAccessKeyId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Access-Key-Id", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Secret-Access-Key", runtime.ParamLocationHeader, params.XAwsSecretAccessKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Secret-Access-Key", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Session-Token", runtime.ParamLocationHeader, params.XAwsSessionToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Session-Token", headerParam2)

	}

	return req, nil
}

// NewSetAppConfigRequest calls the generic SetAppConfig builder with application/json body
func NewSetAppConfigRequest(server string, params *SetAppConfigParams, body SetAppConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetAppConfigRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSetAppConfigRequestWithBody generates requests for SetAppConfig with any type of body
func NewSetAppConfigRequestWithBody(server string, params *SetAppConfigParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app-configs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_name", runtime.ParamLocationQuery, params.AppName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Stack != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stack", runtime.ParamLocationQuery, *params.Stack); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_profile", runtime.ParamLocationQuery, params.AwsProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_region", runtime.ParamLocationQuery, params.AwsRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_namespace", runtime.ParamLocationQuery, params.K8sNamespace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_cluster_id", runtime.ParamLocationQuery, params.K8sClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Access-Key-Id", runtime.ParamLocationHeader, params.XAwsAccessKeyId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Access-Key-Id", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Secret-Access-Key", runtime.ParamLocationHeader, params.XAwsSecretAccessKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Secret-Access-Key", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Session-Token", runtime.ParamLocationHeader, params.XAwsSessionToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Session-Token", headerParam2)

	}

	return req, nil
}

// NewDeleteAppConfigRequest generates requests for DeleteAppConfig
func NewDeleteAppConfigRequest(server string, key string, params *DeleteAppConfigParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app-configs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_name", runtime.ParamLocationQuery, params.AppName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Stack != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stack", runtime.ParamLocationQuery, *params.Stack); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_profile", runtime.ParamLocationQuery, params.AwsProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_region", runtime.ParamLocationQuery, params.AwsRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_namespace", runtime.ParamLocationQuery, params.K8sNamespace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_cluster_id", runtime.ParamLocationQuery, params.K8sClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Access-Key-Id", runtime.ParamLocationHeader, params.XAwsAccessKeyId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Access-Key-Id", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Secret-Access-Key", runtime.ParamLocationHeader, params.XAwsSecretAccessKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Secret-Access-Key", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Session-Token", runtime.ParamLocationHeader, params.XAwsSessionToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Session-Token", headerParam2)

	}

	return req, nil
}

// NewReadAppConfigRequest generates requests for ReadAppConfig
func NewReadAppConfigRequest(server string, key string, params *ReadAppConfigParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app-configs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_name", runtime.ParamLocationQuery, params.AppName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Stack != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stack", runtime.ParamLocationQuery, *params.Stack); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_profile", runtime.ParamLocationQuery, params.AwsProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_region", runtime.ParamLocationQuery, params.AwsRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_namespace", runtime.ParamLocationQuery, params.K8sNamespace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_cluster_id", runtime.ParamLocationQuery, params.K8sClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Access-Key-Id", runtime.ParamLocationHeader, params.XAwsAccessKeyId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Access-Key-Id", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Secret-Access-Key", runtime.ParamLocationHeader, params.XAwsSecretAccessKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Secret-Access-Key", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Session-Token", runtime.ParamLocationHeader, params.XAwsSessionToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Session-Token", headerParam2)

	}

	return req, nil
}

// NewHealthRequest generates requests for Health
func NewHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAppConfigWithResponse request
	ListAppConfigWithResponse(ctx context.Context, params *ListAppConfigParams, reqEditors ...RequestEditorFn) (*ListAppConfigResponse, error)

	// SetAppConfigWithBodyWithResponse request with any body
	SetAppConfigWithBodyWithResponse(ctx context.Context, params *SetAppConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAppConfigResponse, error)

	SetAppConfigWithResponse(ctx context.Context, params *SetAppConfigParams, body SetAppConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SetAppConfigResponse, error)

	// DeleteAppConfigWithResponse request
	DeleteAppConfigWithResponse(ctx context.Context, key string, params *DeleteAppConfigParams, reqEditors ...RequestEditorFn) (*DeleteAppConfigResponse, error)

	// ReadAppConfigWithResponse request
	ReadAppConfigWithResponse(ctx context.Context, key string, params *ReadAppConfigParams, reqEditors ...RequestEditorFn) (*ReadAppConfigResponse, error)

	// HealthWithResponse request
	HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error)
}

type ListAppConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AppConfigList
	JSON400      *N400
	JSON403      *N403
	JSON404      *N404
	JSON409      *N409
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r ListAppConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAppConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetAppConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppConfigList
	JSON400      *N400
	JSON403      *N403
	JSON404      *N404
	JSON409      *N409
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r SetAppConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetAppConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAppConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400
	JSON403      *N403
	JSON404      *N404
	JSON409      *N409
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteAppConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAppConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadAppConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppConfigList
	JSON400      *N400
	JSON403      *N403
	JSON404      *N404
	JSON409      *N409
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r ReadAppConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadAppConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		GitSha  string `json:"git_sha"`
		Route   string `json:"route"`
		Status  string `json:"status"`
		Version string `json:"version"`
	}
}

// Status returns HTTPResponse.Status
func (r HealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAppConfigWithResponse request returning *ListAppConfigResponse
func (c *ClientWithResponses) ListAppConfigWithResponse(ctx context.Context, params *ListAppConfigParams, reqEditors ...RequestEditorFn) (*ListAppConfigResponse, error) {
	rsp, err := c.ListAppConfig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAppConfigResponse(rsp)
}

// SetAppConfigWithBodyWithResponse request with arbitrary body returning *SetAppConfigResponse
func (c *ClientWithResponses) SetAppConfigWithBodyWithResponse(ctx context.Context, params *SetAppConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAppConfigResponse, error) {
	rsp, err := c.SetAppConfigWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetAppConfigResponse(rsp)
}

func (c *ClientWithResponses) SetAppConfigWithResponse(ctx context.Context, params *SetAppConfigParams, body SetAppConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SetAppConfigResponse, error) {
	rsp, err := c.SetAppConfig(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetAppConfigResponse(rsp)
}

// DeleteAppConfigWithResponse request returning *DeleteAppConfigResponse
func (c *ClientWithResponses) DeleteAppConfigWithResponse(ctx context.Context, key string, params *DeleteAppConfigParams, reqEditors ...RequestEditorFn) (*DeleteAppConfigResponse, error) {
	rsp, err := c.DeleteAppConfig(ctx, key, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAppConfigResponse(rsp)
}

// ReadAppConfigWithResponse request returning *ReadAppConfigResponse
func (c *ClientWithResponses) ReadAppConfigWithResponse(ctx context.Context, key string, params *ReadAppConfigParams, reqEditors ...RequestEditorFn) (*ReadAppConfigResponse, error) {
	rsp, err := c.ReadAppConfig(ctx, key, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadAppConfigResponse(rsp)
}

// HealthWithResponse request returning *HealthResponse
func (c *ClientWithResponses) HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error) {
	rsp, err := c.Health(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthResponse(rsp)
}

// ParseListAppConfigResponse parses an HTTP response from a ListAppConfigWithResponse call
func ParseListAppConfigResponse(rsp *http.Response) (*ListAppConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAppConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AppConfigList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSetAppConfigResponse parses an HTTP response from a SetAppConfigWithResponse call
func ParseSetAppConfigResponse(rsp *http.Response) (*SetAppConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetAppConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppConfigList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAppConfigResponse parses an HTTP response from a DeleteAppConfigWithResponse call
func ParseDeleteAppConfigResponse(rsp *http.Response) (*DeleteAppConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAppConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseReadAppConfigResponse parses an HTTP response from a ReadAppConfigWithResponse call
func ParseReadAppConfigResponse(rsp *http.Response) (*ReadAppConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadAppConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppConfigList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseHealthResponse parses an HTTP response from a HealthWithResponse call
func ParseHealthResponse(rsp *http.Response) (*HealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			GitSha  string `json:"git_sha"`
			Route   string `json:"route"`
			Status  string `json:"status"`
			Version string `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /app-configs)
	ListAppConfig(ctx echo.Context, params ListAppConfigParams) error

	// (POST /app-configs)
	SetAppConfig(ctx echo.Context, params SetAppConfigParams) error

	// (DELETE /app-configs/{key})
	DeleteAppConfig(ctx echo.Context, key string, params DeleteAppConfigParams) error

	// (GET /app-configs/{key})
	ReadAppConfig(ctx echo.Context, key string, params ReadAppConfigParams) error
	// Simple endpoint to check if the server is up
	// (GET /health)
	Health(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAppConfig converts echo context to params.
func (w *ServerInterfaceWrapper) ListAppConfig(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAppConfigParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", ctx.QueryParams(), &params.ItemsPerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemsPerPage: %s", err))
	}

	// ------------- Required query parameter "app_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "app_name", ctx.QueryParams(), &params.AppName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_name: %s", err))
	}

	// ------------- Required query parameter "environment" -------------

	err = runtime.BindQueryParameter("form", true, true, "environment", ctx.QueryParams(), &params.Environment)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environment: %s", err))
	}

	// ------------- Optional query parameter "stack" -------------

	err = runtime.BindQueryParameter("form", true, false, "stack", ctx.QueryParams(), &params.Stack)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stack: %s", err))
	}

	// ------------- Required query parameter "aws_profile" -------------

	err = runtime.BindQueryParameter("form", true, true, "aws_profile", ctx.QueryParams(), &params.AwsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aws_profile: %s", err))
	}

	// ------------- Required query parameter "aws_region" -------------

	err = runtime.BindQueryParameter("form", true, true, "aws_region", ctx.QueryParams(), &params.AwsRegion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aws_region: %s", err))
	}

	// ------------- Required query parameter "k8s_namespace" -------------

	err = runtime.BindQueryParameter("form", true, true, "k8s_namespace", ctx.QueryParams(), &params.K8sNamespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter k8s_namespace: %s", err))
	}

	// ------------- Required query parameter "k8s_cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "k8s_cluster_id", ctx.QueryParams(), &params.K8sClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter k8s_cluster_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Aws-Access-Key-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Aws-Access-Key-Id")]; found {
		var XAwsAccessKeyId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Aws-Access-Key-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Aws-Access-Key-Id", runtime.ParamLocationHeader, valueList[0], &XAwsAccessKeyId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Aws-Access-Key-Id: %s", err))
		}

		params.XAwsAccessKeyId = XAwsAccessKeyId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Aws-Access-Key-Id is required, but not found"))
	}
	// ------------- Required header parameter "X-Aws-Secret-Access-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Aws-Secret-Access-Key")]; found {
		var XAwsSecretAccessKey string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Aws-Secret-Access-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Aws-Secret-Access-Key", runtime.ParamLocationHeader, valueList[0], &XAwsSecretAccessKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Aws-Secret-Access-Key: %s", err))
		}

		params.XAwsSecretAccessKey = XAwsSecretAccessKey
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Aws-Secret-Access-Key is required, but not found"))
	}
	// ------------- Required header parameter "X-Aws-Session-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Aws-Session-Token")]; found {
		var XAwsSessionToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Aws-Session-Token, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Aws-Session-Token", runtime.ParamLocationHeader, valueList[0], &XAwsSessionToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Aws-Session-Token: %s", err))
		}

		params.XAwsSessionToken = XAwsSessionToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Aws-Session-Token is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListAppConfig(ctx, params)
	return err
}

// SetAppConfig converts echo context to params.
func (w *ServerInterfaceWrapper) SetAppConfig(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SetAppConfigParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "itemsPerPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "itemsPerPage", ctx.QueryParams(), &params.ItemsPerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter itemsPerPage: %s", err))
	}

	// ------------- Required query parameter "app_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "app_name", ctx.QueryParams(), &params.AppName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_name: %s", err))
	}

	// ------------- Required query parameter "environment" -------------

	err = runtime.BindQueryParameter("form", true, true, "environment", ctx.QueryParams(), &params.Environment)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environment: %s", err))
	}

	// ------------- Optional query parameter "stack" -------------

	err = runtime.BindQueryParameter("form", true, false, "stack", ctx.QueryParams(), &params.Stack)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stack: %s", err))
	}

	// ------------- Required query parameter "aws_profile" -------------

	err = runtime.BindQueryParameter("form", true, true, "aws_profile", ctx.QueryParams(), &params.AwsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aws_profile: %s", err))
	}

	// ------------- Required query parameter "aws_region" -------------

	err = runtime.BindQueryParameter("form", true, true, "aws_region", ctx.QueryParams(), &params.AwsRegion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aws_region: %s", err))
	}

	// ------------- Required query parameter "k8s_namespace" -------------

	err = runtime.BindQueryParameter("form", true, true, "k8s_namespace", ctx.QueryParams(), &params.K8sNamespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter k8s_namespace: %s", err))
	}

	// ------------- Required query parameter "k8s_cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "k8s_cluster_id", ctx.QueryParams(), &params.K8sClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter k8s_cluster_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Aws-Access-Key-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Aws-Access-Key-Id")]; found {
		var XAwsAccessKeyId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Aws-Access-Key-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Aws-Access-Key-Id", runtime.ParamLocationHeader, valueList[0], &XAwsAccessKeyId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Aws-Access-Key-Id: %s", err))
		}

		params.XAwsAccessKeyId = XAwsAccessKeyId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Aws-Access-Key-Id is required, but not found"))
	}
	// ------------- Required header parameter "X-Aws-Secret-Access-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Aws-Secret-Access-Key")]; found {
		var XAwsSecretAccessKey string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Aws-Secret-Access-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Aws-Secret-Access-Key", runtime.ParamLocationHeader, valueList[0], &XAwsSecretAccessKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Aws-Secret-Access-Key: %s", err))
		}

		params.XAwsSecretAccessKey = XAwsSecretAccessKey
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Aws-Secret-Access-Key is required, but not found"))
	}
	// ------------- Required header parameter "X-Aws-Session-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Aws-Session-Token")]; found {
		var XAwsSessionToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Aws-Session-Token, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Aws-Session-Token", runtime.ParamLocationHeader, valueList[0], &XAwsSessionToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Aws-Session-Token: %s", err))
		}

		params.XAwsSessionToken = XAwsSessionToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Aws-Session-Token is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SetAppConfig(ctx, params)
	return err
}

// DeleteAppConfig converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAppConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, ctx.Param("key"), &key)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteAppConfigParams
	// ------------- Required query parameter "app_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "app_name", ctx.QueryParams(), &params.AppName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_name: %s", err))
	}

	// ------------- Required query parameter "environment" -------------

	err = runtime.BindQueryParameter("form", true, true, "environment", ctx.QueryParams(), &params.Environment)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environment: %s", err))
	}

	// ------------- Optional query parameter "stack" -------------

	err = runtime.BindQueryParameter("form", true, false, "stack", ctx.QueryParams(), &params.Stack)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stack: %s", err))
	}

	// ------------- Required query parameter "aws_profile" -------------

	err = runtime.BindQueryParameter("form", true, true, "aws_profile", ctx.QueryParams(), &params.AwsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aws_profile: %s", err))
	}

	// ------------- Required query parameter "aws_region" -------------

	err = runtime.BindQueryParameter("form", true, true, "aws_region", ctx.QueryParams(), &params.AwsRegion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aws_region: %s", err))
	}

	// ------------- Required query parameter "k8s_namespace" -------------

	err = runtime.BindQueryParameter("form", true, true, "k8s_namespace", ctx.QueryParams(), &params.K8sNamespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter k8s_namespace: %s", err))
	}

	// ------------- Required query parameter "k8s_cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "k8s_cluster_id", ctx.QueryParams(), &params.K8sClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter k8s_cluster_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Aws-Access-Key-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Aws-Access-Key-Id")]; found {
		var XAwsAccessKeyId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Aws-Access-Key-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Aws-Access-Key-Id", runtime.ParamLocationHeader, valueList[0], &XAwsAccessKeyId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Aws-Access-Key-Id: %s", err))
		}

		params.XAwsAccessKeyId = XAwsAccessKeyId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Aws-Access-Key-Id is required, but not found"))
	}
	// ------------- Required header parameter "X-Aws-Secret-Access-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Aws-Secret-Access-Key")]; found {
		var XAwsSecretAccessKey string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Aws-Secret-Access-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Aws-Secret-Access-Key", runtime.ParamLocationHeader, valueList[0], &XAwsSecretAccessKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Aws-Secret-Access-Key: %s", err))
		}

		params.XAwsSecretAccessKey = XAwsSecretAccessKey
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Aws-Secret-Access-Key is required, but not found"))
	}
	// ------------- Required header parameter "X-Aws-Session-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Aws-Session-Token")]; found {
		var XAwsSessionToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Aws-Session-Token, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Aws-Session-Token", runtime.ParamLocationHeader, valueList[0], &XAwsSessionToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Aws-Session-Token: %s", err))
		}

		params.XAwsSessionToken = XAwsSessionToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Aws-Session-Token is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAppConfig(ctx, key, params)
	return err
}

// ReadAppConfig converts echo context to params.
func (w *ServerInterfaceWrapper) ReadAppConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithLocation("simple", false, "key", runtime.ParamLocationPath, ctx.Param("key"), &key)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter key: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ReadAppConfigParams
	// ------------- Required query parameter "app_name" -------------

	err = runtime.BindQueryParameter("form", true, true, "app_name", ctx.QueryParams(), &params.AppName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter app_name: %s", err))
	}

	// ------------- Required query parameter "environment" -------------

	err = runtime.BindQueryParameter("form", true, true, "environment", ctx.QueryParams(), &params.Environment)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter environment: %s", err))
	}

	// ------------- Optional query parameter "stack" -------------

	err = runtime.BindQueryParameter("form", true, false, "stack", ctx.QueryParams(), &params.Stack)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stack: %s", err))
	}

	// ------------- Required query parameter "aws_profile" -------------

	err = runtime.BindQueryParameter("form", true, true, "aws_profile", ctx.QueryParams(), &params.AwsProfile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aws_profile: %s", err))
	}

	// ------------- Required query parameter "aws_region" -------------

	err = runtime.BindQueryParameter("form", true, true, "aws_region", ctx.QueryParams(), &params.AwsRegion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter aws_region: %s", err))
	}

	// ------------- Required query parameter "k8s_namespace" -------------

	err = runtime.BindQueryParameter("form", true, true, "k8s_namespace", ctx.QueryParams(), &params.K8sNamespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter k8s_namespace: %s", err))
	}

	// ------------- Required query parameter "k8s_cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "k8s_cluster_id", ctx.QueryParams(), &params.K8sClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter k8s_cluster_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Aws-Access-Key-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Aws-Access-Key-Id")]; found {
		var XAwsAccessKeyId string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Aws-Access-Key-Id, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Aws-Access-Key-Id", runtime.ParamLocationHeader, valueList[0], &XAwsAccessKeyId)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Aws-Access-Key-Id: %s", err))
		}

		params.XAwsAccessKeyId = XAwsAccessKeyId
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Aws-Access-Key-Id is required, but not found"))
	}
	// ------------- Required header parameter "X-Aws-Secret-Access-Key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Aws-Secret-Access-Key")]; found {
		var XAwsSecretAccessKey string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Aws-Secret-Access-Key, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Aws-Secret-Access-Key", runtime.ParamLocationHeader, valueList[0], &XAwsSecretAccessKey)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Aws-Secret-Access-Key: %s", err))
		}

		params.XAwsSecretAccessKey = XAwsSecretAccessKey
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Aws-Secret-Access-Key is required, but not found"))
	}
	// ------------- Required header parameter "X-Aws-Session-Token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Aws-Session-Token")]; found {
		var XAwsSessionToken string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Aws-Session-Token, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Aws-Session-Token", runtime.ParamLocationHeader, valueList[0], &XAwsSessionToken)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Aws-Session-Token: %s", err))
		}

		params.XAwsSessionToken = XAwsSessionToken
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Aws-Session-Token is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ReadAppConfig(ctx, key, params)
	return err
}

// Health converts echo context to params.
func (w *ServerInterfaceWrapper) Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Health(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/app-configs", wrapper.ListAppConfig)
	router.POST(baseURL+"/app-configs", wrapper.SetAppConfig)
	router.DELETE(baseURL+"/app-configs/:key", wrapper.DeleteAppConfig)
	router.GET(baseURL+"/app-configs/:key", wrapper.ReadAppConfig)
	router.GET(baseURL+"/health", wrapper.Health)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZX2/bNhD/KgS3Rzl2G7db/JZ1GxZ0D8FSDAOCIGDJk3W1RDLkMakR+LsPpGRbiuU4",
	"RgJsCfxkWbr/vLvfnXTPpams0aDJ88k9d+Ct0R7Sn/FoFH+k0QSa4qWwtkQpCI0efvNGx3teFlCJeGWd",
	"seAIa25pFMRfmlvgE46aYAqOLzIOzhkXaRYZ9yQo+BadJ4d6yheLjDu4CehA8cllLW1FfpUtyc3XbyCJ",
	"LyK9Ai8d2mhdUngrSlQMtQ2UMSVIsOZeNGI8On7VzvmQ5ygRNDELrkLv0WhfezZ+xZ458CY4CUwbYrkJ",
	"ujmtk1fskzQ6L1ES6ilb+peO6sOrrrCg4bsFSaBYUphE1sYmfafWfjI6x+mf6GnTfGHttRYV9JiWcelA",
	"EKhrkRhz46p4xZUgGBBW0dINHgUl7MsD+had0VUT/o3nqDqyUNPHMc94Jb5jFSo+Gb8/GZ98/On9yYeM",
	"V6jrm6Os50xmMO/VUKdDfKQgF6GMatpWRRuj0Mt4NHLGuzZf9fhU0/XpClbtHdVbUQbYnT6oeOfUOsqy",
	"9WFnD5xbOhXDs1S2Ckp/FqLOTR2vdjZ+KdAz9ExoJgIZNgUNLhrATs/PWIuWVUIBM4GYySP1b5pYnbVM",
	"QY4ak8CME1IZVcfnF/Xz0/OzaCQ4X+scHb07GsUgGQtaWOQTfnw0OjrmGbeCipTmQ2HtQKY6SP+nkIIf",
	"KyGV+ZniEx4rZFUuiduJCghiEV8+9PSuEMSsmAIjwxxoBY7HqPAJvwngYhzruuKRiGetBrJK0XebKbrI",
	"HipCgopJEzStNUW0YY3cPpWRx5+DO99XdZ+wVtasc41cgLbgjbzsl9VNu2eLW+bt3ozizl9bZ3IsX8St",
	"KM7BtE7ZZ0ub/exTwL0VEl5KoCyDJ3DXqUXsL7EAUWd4I/KfwemdH5xKCd4PPsN8cPaSci9AOqCW+BeV",
	"naa0wRczg/2O6yrrjubv9xwcUlXGix8d5HzCfxiu5/5hA9nDLl4vVmUqnBPzLbNaKImt+FjZMDabQ5+y",
	"lRvDSLQexHfRHrdG212049bIuIv2pDWHPU4biVIQrKnHmW4wLoAS+KyjcYdUMCqAeQsScwTFPsN8+HfE",
	"uCOePYCACzggwAEBDghwQIDtCHATwNMvRs2fsTVu20OeOOe35/SnLInrdjiD+TDxxVbiYbMGF88EuT2w",
	"7TE7U9tuYt1u2exO+GT3Gwe4RdbZWYb3M5gvaryL+/Um8v2a7vsEdT3o1wnlJu7V3I9A3wEWDrBwgIUd",
	"cq2gohXcPa3bsl48vUOm3ti8f3v7C0DzCqcbnt9Rq6f1QCa0Yg4oOO0Z0mZL/AuEOjTEQ0M8NMT/WUP8",
	"70fR1Ghbn8Xe9hhagCip2Oy1nwqQM4Z5/XYF3C04hp4Fy7P+9+t/1IKeeardRWqKdO0L0btMOROo/8PW",
	"1s9xre8Ku3awRsZSzZozWxn1lNXsYhU4B0IW4msJ9SEd973dWtJqQ2366FKoKuHmkQorWwIDrazB+p2R",
	"3HpU8Yz/DQAA//9hsURVgCAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
