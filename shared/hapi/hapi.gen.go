// Package hapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package hapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for AppConfigListSource.
const (
	Environment AppConfigListSource = "environment"
	Stack       AppConfigListSource = "stack"
)

// AppConfigList defines model for AppConfigList.
type AppConfigList struct {
	AppName     string              `json:"app_name"`
	CreatedAt   time.Time           `json:"created_at"`
	DeletedAt   *time.Time          `json:"deleted_at,omitempty"`
	Environment string              `json:"environment"`
	Id          int64               `json:"id"`
	Key         string              `json:"key"`
	Source      AppConfigListSource `json:"source"`
	Stack       string              `json:"stack"`
	UpdatedAt   time.Time           `json:"updated_at"`
	Value       string              `json:"value"`
}

// AppConfigListSource defines model for AppConfigList.Source.
type AppConfigListSource string

// N400 defines model for 400.
type N400 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// N403 defines model for 403.
type N403 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// N404 defines model for 404.
type N404 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// N409 defines model for 409.
type N409 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// N500 defines model for 500.
type N500 struct {
	Code   int          `json:"code"`
	Errors *interface{} `json:"errors,omitempty"`
	Status string       `json:"status"`
}

// ListAppConfigParams defines parameters for ListAppConfig.
type ListAppConfigParams struct {
	// Page what page to render
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage        *int    `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
	AppName             string  `form:"app_name" json:"app_name"`
	Environment         string  `form:"environment" json:"environment"`
	Stack               *string `form:"stack,omitempty" json:"stack,omitempty"`
	AwsProfile          string  `form:"aws_profile" json:"aws_profile"`
	AwsRegion           string  `form:"aws_region" json:"aws_region"`
	K8sNamespace        string  `form:"k8s_namespace" json:"k8s_namespace"`
	K8sClusterId        string  `form:"k8s_cluster_id" json:"k8s_cluster_id"`
	XAwsAccessKeyId     string  `json:"X-Aws-Access-Key-Id"`
	XAwsSecretAccessKey string  `json:"X-Aws-Secret-Access-Key"`
	XAwsSessionToken    string  `json:"X-Aws-Session-Token"`
}

// SetAppConfigJSONBody defines parameters for SetAppConfig.
type SetAppConfigJSONBody struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// SetAppConfigParams defines parameters for SetAppConfig.
type SetAppConfigParams struct {
	// Page what page to render
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// ItemsPerPage item count to render per page
	ItemsPerPage        *int    `form:"itemsPerPage,omitempty" json:"itemsPerPage,omitempty"`
	AppName             string  `form:"app_name" json:"app_name"`
	Environment         string  `form:"environment" json:"environment"`
	Stack               *string `form:"stack,omitempty" json:"stack,omitempty"`
	AwsProfile          string  `form:"aws_profile" json:"aws_profile"`
	AwsRegion           string  `form:"aws_region" json:"aws_region"`
	K8sNamespace        string  `form:"k8s_namespace" json:"k8s_namespace"`
	K8sClusterId        string  `form:"k8s_cluster_id" json:"k8s_cluster_id"`
	XAwsAccessKeyId     string  `json:"X-Aws-Access-Key-Id"`
	XAwsSecretAccessKey string  `json:"X-Aws-Secret-Access-Key"`
	XAwsSessionToken    string  `json:"X-Aws-Session-Token"`
}

// DeleteAppConfigParams defines parameters for DeleteAppConfig.
type DeleteAppConfigParams struct {
	AppName             string  `form:"app_name" json:"app_name"`
	Environment         string  `form:"environment" json:"environment"`
	Stack               *string `form:"stack,omitempty" json:"stack,omitempty"`
	AwsProfile          string  `form:"aws_profile" json:"aws_profile"`
	AwsRegion           string  `form:"aws_region" json:"aws_region"`
	K8sNamespace        string  `form:"k8s_namespace" json:"k8s_namespace"`
	K8sClusterId        string  `form:"k8s_cluster_id" json:"k8s_cluster_id"`
	XAwsAccessKeyId     string  `json:"X-Aws-Access-Key-Id"`
	XAwsSecretAccessKey string  `json:"X-Aws-Secret-Access-Key"`
	XAwsSessionToken    string  `json:"X-Aws-Session-Token"`
}

// ReadAppConfigParams defines parameters for ReadAppConfig.
type ReadAppConfigParams struct {
	AppName             string  `form:"app_name" json:"app_name"`
	Environment         string  `form:"environment" json:"environment"`
	Stack               *string `form:"stack,omitempty" json:"stack,omitempty"`
	AwsProfile          string  `form:"aws_profile" json:"aws_profile"`
	AwsRegion           string  `form:"aws_region" json:"aws_region"`
	K8sNamespace        string  `form:"k8s_namespace" json:"k8s_namespace"`
	K8sClusterId        string  `form:"k8s_cluster_id" json:"k8s_cluster_id"`
	XAwsAccessKeyId     string  `json:"X-Aws-Access-Key-Id"`
	XAwsSecretAccessKey string  `json:"X-Aws-Secret-Access-Key"`
	XAwsSessionToken    string  `json:"X-Aws-Session-Token"`
}

// SetAppConfigJSONRequestBody defines body for SetAppConfig for application/json ContentType.
type SetAppConfigJSONRequestBody SetAppConfigJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListAppConfig request
	ListAppConfig(ctx context.Context, params *ListAppConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetAppConfigWithBody request with any body
	SetAppConfigWithBody(ctx context.Context, params *SetAppConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetAppConfig(ctx context.Context, params *SetAppConfigParams, body SetAppConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAppConfig request
	DeleteAppConfig(ctx context.Context, key string, params *DeleteAppConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadAppConfig request
	ReadAppConfig(ctx context.Context, key string, params *ReadAppConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Health request
	Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListAppConfig(ctx context.Context, params *ListAppConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAppConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetAppConfigWithBody(ctx context.Context, params *SetAppConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetAppConfigRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetAppConfig(ctx context.Context, params *SetAppConfigParams, body SetAppConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetAppConfigRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAppConfig(ctx context.Context, key string, params *DeleteAppConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAppConfigRequest(c.Server, key, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadAppConfig(ctx context.Context, key string, params *ReadAppConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadAppConfigRequest(c.Server, key, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Health(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAppConfigRequest generates requests for ListAppConfig
func NewListAppConfigRequest(server string, params *ListAppConfigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app-configs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_name", runtime.ParamLocationQuery, params.AppName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Stack != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stack", runtime.ParamLocationQuery, *params.Stack); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_profile", runtime.ParamLocationQuery, params.AwsProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_region", runtime.ParamLocationQuery, params.AwsRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_namespace", runtime.ParamLocationQuery, params.K8sNamespace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_cluster_id", runtime.ParamLocationQuery, params.K8sClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Access-Key-Id", runtime.ParamLocationHeader, params.XAwsAccessKeyId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Access-Key-Id", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Secret-Access-Key", runtime.ParamLocationHeader, params.XAwsSecretAccessKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Secret-Access-Key", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Session-Token", runtime.ParamLocationHeader, params.XAwsSessionToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Session-Token", headerParam2)

	}

	return req, nil
}

// NewSetAppConfigRequest calls the generic SetAppConfig builder with application/json body
func NewSetAppConfigRequest(server string, params *SetAppConfigParams, body SetAppConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetAppConfigRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSetAppConfigRequestWithBody generates requests for SetAppConfig with any type of body
func NewSetAppConfigRequestWithBody(server string, params *SetAppConfigParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app-configs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemsPerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemsPerPage", runtime.ParamLocationQuery, *params.ItemsPerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_name", runtime.ParamLocationQuery, params.AppName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Stack != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stack", runtime.ParamLocationQuery, *params.Stack); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_profile", runtime.ParamLocationQuery, params.AwsProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_region", runtime.ParamLocationQuery, params.AwsRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_namespace", runtime.ParamLocationQuery, params.K8sNamespace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_cluster_id", runtime.ParamLocationQuery, params.K8sClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Access-Key-Id", runtime.ParamLocationHeader, params.XAwsAccessKeyId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Access-Key-Id", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Secret-Access-Key", runtime.ParamLocationHeader, params.XAwsSecretAccessKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Secret-Access-Key", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Session-Token", runtime.ParamLocationHeader, params.XAwsSessionToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Session-Token", headerParam2)

	}

	return req, nil
}

// NewDeleteAppConfigRequest generates requests for DeleteAppConfig
func NewDeleteAppConfigRequest(server string, key string, params *DeleteAppConfigParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app-configs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_name", runtime.ParamLocationQuery, params.AppName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Stack != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stack", runtime.ParamLocationQuery, *params.Stack); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_profile", runtime.ParamLocationQuery, params.AwsProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_region", runtime.ParamLocationQuery, params.AwsRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_namespace", runtime.ParamLocationQuery, params.K8sNamespace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_cluster_id", runtime.ParamLocationQuery, params.K8sClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Access-Key-Id", runtime.ParamLocationHeader, params.XAwsAccessKeyId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Access-Key-Id", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Secret-Access-Key", runtime.ParamLocationHeader, params.XAwsSecretAccessKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Secret-Access-Key", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Session-Token", runtime.ParamLocationHeader, params.XAwsSessionToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Session-Token", headerParam2)

	}

	return req, nil
}

// NewReadAppConfigRequest generates requests for ReadAppConfig
func NewReadAppConfigRequest(server string, key string, params *ReadAppConfigParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/app-configs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_name", runtime.ParamLocationQuery, params.AppName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "environment", runtime.ParamLocationQuery, params.Environment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Stack != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stack", runtime.ParamLocationQuery, *params.Stack); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_profile", runtime.ParamLocationQuery, params.AwsProfile); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aws_region", runtime.ParamLocationQuery, params.AwsRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_namespace", runtime.ParamLocationQuery, params.K8sNamespace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "k8s_cluster_id", runtime.ParamLocationQuery, params.K8sClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Access-Key-Id", runtime.ParamLocationHeader, params.XAwsAccessKeyId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Access-Key-Id", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Secret-Access-Key", runtime.ParamLocationHeader, params.XAwsSecretAccessKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Secret-Access-Key", headerParam1)

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "X-Aws-Session-Token", runtime.ParamLocationHeader, params.XAwsSessionToken)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Aws-Session-Token", headerParam2)

	}

	return req, nil
}

// NewHealthRequest generates requests for Health
func NewHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAppConfigWithResponse request
	ListAppConfigWithResponse(ctx context.Context, params *ListAppConfigParams, reqEditors ...RequestEditorFn) (*ListAppConfigResponse, error)

	// SetAppConfigWithBodyWithResponse request with any body
	SetAppConfigWithBodyWithResponse(ctx context.Context, params *SetAppConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAppConfigResponse, error)

	SetAppConfigWithResponse(ctx context.Context, params *SetAppConfigParams, body SetAppConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SetAppConfigResponse, error)

	// DeleteAppConfigWithResponse request
	DeleteAppConfigWithResponse(ctx context.Context, key string, params *DeleteAppConfigParams, reqEditors ...RequestEditorFn) (*DeleteAppConfigResponse, error)

	// ReadAppConfigWithResponse request
	ReadAppConfigWithResponse(ctx context.Context, key string, params *ReadAppConfigParams, reqEditors ...RequestEditorFn) (*ReadAppConfigResponse, error)

	// HealthWithResponse request
	HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error)
}

type ListAppConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AppConfigList
	JSON400      *N400
	JSON403      *N403
	JSON404      *N404
	JSON409      *N409
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r ListAppConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAppConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetAppConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppConfigList
	JSON400      *N400
	JSON403      *N403
	JSON404      *N404
	JSON409      *N409
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r SetAppConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetAppConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAppConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400
	JSON403      *N403
	JSON404      *N404
	JSON409      *N409
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r DeleteAppConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAppConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadAppConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AppConfigList
	JSON400      *N400
	JSON403      *N403
	JSON404      *N404
	JSON409      *N409
	JSON500      *N500
}

// Status returns HTTPResponse.Status
func (r ReadAppConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadAppConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		GitSha  string `json:"git_sha"`
		Route   string `json:"route"`
		Status  string `json:"status"`
		Version string `json:"version"`
	}
}

// Status returns HTTPResponse.Status
func (r HealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAppConfigWithResponse request returning *ListAppConfigResponse
func (c *ClientWithResponses) ListAppConfigWithResponse(ctx context.Context, params *ListAppConfigParams, reqEditors ...RequestEditorFn) (*ListAppConfigResponse, error) {
	rsp, err := c.ListAppConfig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAppConfigResponse(rsp)
}

// SetAppConfigWithBodyWithResponse request with arbitrary body returning *SetAppConfigResponse
func (c *ClientWithResponses) SetAppConfigWithBodyWithResponse(ctx context.Context, params *SetAppConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAppConfigResponse, error) {
	rsp, err := c.SetAppConfigWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetAppConfigResponse(rsp)
}

func (c *ClientWithResponses) SetAppConfigWithResponse(ctx context.Context, params *SetAppConfigParams, body SetAppConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*SetAppConfigResponse, error) {
	rsp, err := c.SetAppConfig(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetAppConfigResponse(rsp)
}

// DeleteAppConfigWithResponse request returning *DeleteAppConfigResponse
func (c *ClientWithResponses) DeleteAppConfigWithResponse(ctx context.Context, key string, params *DeleteAppConfigParams, reqEditors ...RequestEditorFn) (*DeleteAppConfigResponse, error) {
	rsp, err := c.DeleteAppConfig(ctx, key, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAppConfigResponse(rsp)
}

// ReadAppConfigWithResponse request returning *ReadAppConfigResponse
func (c *ClientWithResponses) ReadAppConfigWithResponse(ctx context.Context, key string, params *ReadAppConfigParams, reqEditors ...RequestEditorFn) (*ReadAppConfigResponse, error) {
	rsp, err := c.ReadAppConfig(ctx, key, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadAppConfigResponse(rsp)
}

// HealthWithResponse request returning *HealthResponse
func (c *ClientWithResponses) HealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*HealthResponse, error) {
	rsp, err := c.Health(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHealthResponse(rsp)
}

// ParseListAppConfigResponse parses an HTTP response from a ListAppConfigWithResponse call
func ParseListAppConfigResponse(rsp *http.Response) (*ListAppConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAppConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AppConfigList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSetAppConfigResponse parses an HTTP response from a SetAppConfigWithResponse call
func ParseSetAppConfigResponse(rsp *http.Response) (*SetAppConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetAppConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppConfigList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAppConfigResponse parses an HTTP response from a DeleteAppConfigWithResponse call
func ParseDeleteAppConfigResponse(rsp *http.Response) (*DeleteAppConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAppConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseReadAppConfigResponse parses an HTTP response from a ReadAppConfigWithResponse call
func ParseReadAppConfigResponse(rsp *http.Response) (*ReadAppConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadAppConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AppConfigList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseHealthResponse parses an HTTP response from a HealthWithResponse call
func ParseHealthResponse(rsp *http.Response) (*HealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			GitSha  string `json:"git_sha"`
			Route   string `json:"route"`
			Status  string `json:"status"`
			Version string `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
