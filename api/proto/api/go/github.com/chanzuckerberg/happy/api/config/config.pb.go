// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HappyEnvLaunchType int32

const (
	HappyEnvLaunchType_UNKNOWN HappyEnvLaunchType = 0 // Don't know what it is
	HappyEnvLaunchType_OTHER   HappyEnvLaunchType = 1 // We know, but it's non-standard (specify in `other_launch_type` field)
	HappyEnvLaunchType_EKS     HappyEnvLaunchType = 2 // AWS EKS
	HappyEnvLaunchType_ECS     HappyEnvLaunchType = 3 // AWS ECS
)

// Enum value maps for HappyEnvLaunchType.
var (
	HappyEnvLaunchType_name = map[int32]string{
		0: "UNKNOWN",
		1: "OTHER",
		2: "EKS",
		3: "ECS",
	}
	HappyEnvLaunchType_value = map[string]int32{
		"UNKNOWN": 0,
		"OTHER":   1,
		"EKS":     2,
		"ECS":     3,
	}
)

func (x HappyEnvLaunchType) Enum() *HappyEnvLaunchType {
	p := new(HappyEnvLaunchType)
	*p = x
	return p
}

func (x HappyEnvLaunchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HappyEnvLaunchType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[0].Descriptor()
}

func (HappyEnvLaunchType) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[0]
}

func (x HappyEnvLaunchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HappyEnvLaunchType.Descriptor instead.
func (HappyEnvLaunchType) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

type HappyAppDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Repo      string `protobuf:"bytes,3,opt,name=repo,proto3" json:"repo,omitempty"`
	HappyRoot string `protobuf:"bytes,4,opt,name=happy_root,json=happyRoot,proto3" json:"happy_root,omitempty"`
}

func (x *HappyAppDefinition) Reset() {
	*x = HappyAppDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HappyAppDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HappyAppDefinition) ProtoMessage() {}

func (x *HappyAppDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HappyAppDefinition.ProtoReflect.Descriptor instead.
func (*HappyAppDefinition) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *HappyAppDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HappyAppDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HappyAppDefinition) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *HappyAppDefinition) GetHappyRoot() string {
	if x != nil {
		return x.HappyRoot
	}
	return ""
}

type HappyApplicationEnvironmentDeployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                     // Deployment Definition ID
	AppId      string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                  // Happy App ID
	Env        string `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`                                   // Happy Environment
	HappyEnvId string `protobuf:"bytes,4,opt,name=happy_env_id,json=happyEnvId,proto3" json:"happy_env_id,omitempty"` // If we have this, do we need "env"?
}

func (x *HappyApplicationEnvironmentDeployment) Reset() {
	*x = HappyApplicationEnvironmentDeployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HappyApplicationEnvironmentDeployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HappyApplicationEnvironmentDeployment) ProtoMessage() {}

func (x *HappyApplicationEnvironmentDeployment) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HappyApplicationEnvironmentDeployment.ProtoReflect.Descriptor instead.
func (*HappyApplicationEnvironmentDeployment) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *HappyApplicationEnvironmentDeployment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HappyApplicationEnvironmentDeployment) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *HappyApplicationEnvironmentDeployment) GetEnv() string {
	if x != nil {
		return x.Env
	}
	return ""
}

func (x *HappyApplicationEnvironmentDeployment) GetHappyEnvId() string {
	if x != nil {
		return x.HappyEnvId
	}
	return ""
}

type HappyStackDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ApplicationEnvironmentId string `protobuf:"bytes,3,opt,name=application_environment_id,json=applicationEnvironmentId,proto3" json:"application_environment_id,omitempty"`
}

func (x *HappyStackDefinition) Reset() {
	*x = HappyStackDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HappyStackDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HappyStackDefinition) ProtoMessage() {}

func (x *HappyStackDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HappyStackDefinition.ProtoReflect.Descriptor instead.
func (*HappyStackDefinition) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

func (x *HappyStackDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HappyStackDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HappyStackDefinition) GetApplicationEnvironmentId() string {
	if x != nil {
		return x.ApplicationEnvironmentId
	}
	return ""
}

type HappyEnvironmentDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LaunchType      HappyEnvLaunchType `protobuf:"varint,2,opt,name=launch_type,json=launchType,proto3,enum=happy.api.config.HappyEnvLaunchType" json:"launch_type,omitempty"`
	OtherLaunchType *string            `protobuf:"bytes,3,opt,name=other_launch_type,json=otherLaunchType,proto3,oneof" json:"other_launch_type,omitempty"` // If launch_type == OTHER, specify here
	Namespace       string             `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ComputeArn      string             `protobuf:"bytes,5,opt,name=compute_arn,json=computeArn,proto3" json:"compute_arn,omitempty"`
}

func (x *HappyEnvironmentDefinition) Reset() {
	*x = HappyEnvironmentDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HappyEnvironmentDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HappyEnvironmentDefinition) ProtoMessage() {}

func (x *HappyEnvironmentDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HappyEnvironmentDefinition.ProtoReflect.Descriptor instead.
func (*HappyEnvironmentDefinition) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3}
}

func (x *HappyEnvironmentDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HappyEnvironmentDefinition) GetLaunchType() HappyEnvLaunchType {
	if x != nil {
		return x.LaunchType
	}
	return HappyEnvLaunchType_UNKNOWN
}

func (x *HappyEnvironmentDefinition) GetOtherLaunchType() string {
	if x != nil && x.OtherLaunchType != nil {
		return *x.OtherLaunchType
	}
	return ""
}

func (x *HappyEnvironmentDefinition) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *HappyEnvironmentDefinition) GetComputeArn() string {
	if x != nil {
		return x.ComputeArn
	}
	return ""
}

var File_config_proto protoreflect.FileDescriptor

var file_config_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x68, 0x61, 0x70, 0x70, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x6b, 0x0a, 0x12, 0x48, 0x61, 0x70, 0x70, 0x79, 0x41, 0x70, 0x70, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x61, 0x70, 0x70, 0x79, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x68, 0x61, 0x70, 0x70, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x82, 0x01,
	0x0a, 0x25, 0x48, 0x61, 0x70, 0x70, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76,
	0x12, 0x20, 0x0a, 0x0c, 0x68, 0x61, 0x70, 0x70, 0x79, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x61, 0x70, 0x70, 0x79, 0x45, 0x6e, 0x76,
	0x49, 0x64, 0x22, 0x78, 0x0a, 0x14, 0x48, 0x61, 0x70, 0x70, 0x79, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xf9, 0x01, 0x0a,
	0x1a, 0x48, 0x61, 0x70, 0x70, 0x79, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x68, 0x61, 0x70, 0x70, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x48, 0x61, 0x70, 0x70, 0x79, 0x45, 0x6e, 0x76, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2f, 0x0a, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x41,
	0x72, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x3e, 0x0a, 0x12, 0x48, 0x61, 0x70, 0x70,
	0x79, 0x45, 0x6e, 0x76, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4b, 0x53, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x45, 0x43, 0x53, 0x10, 0x03, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x7a, 0x75, 0x63, 0x6b, 0x65,
	0x72, 0x62, 0x65, 0x72, 0x67, 0x2f, 0x68, 0x61, 0x70, 0x70, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData = file_config_proto_rawDesc
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_proto_rawDescData)
	})
	return file_config_proto_rawDescData
}

var file_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_config_proto_goTypes = []interface{}{
	(HappyEnvLaunchType)(0),                       // 0: happy.api.config.HappyEnvLaunchType
	(*HappyAppDefinition)(nil),                    // 1: happy.api.config.HappyAppDefinition
	(*HappyApplicationEnvironmentDeployment)(nil), // 2: happy.api.config.HappyApplicationEnvironmentDeployment
	(*HappyStackDefinition)(nil),                  // 3: happy.api.config.HappyStackDefinition
	(*HappyEnvironmentDefinition)(nil),            // 4: happy.api.config.HappyEnvironmentDefinition
}
var file_config_proto_depIdxs = []int32{
	0, // 0: happy.api.config.HappyEnvironmentDefinition.launch_type:type_name -> happy.api.config.HappyEnvLaunchType
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HappyAppDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HappyApplicationEnvironmentDeployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HappyStackDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HappyEnvironmentDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_config_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		EnumInfos:         file_config_proto_enumTypes,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_rawDesc = nil
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
