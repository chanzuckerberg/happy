// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chanzuckerberg/happy/api/pkg/ent/appstack"
)

// AppStackCreate is the builder for creating a AppStack entity.
type AppStackCreate struct {
	config
	mutation *AppStackMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (asc *AppStackCreate) SetCreatedAt(t time.Time) *AppStackCreate {
	asc.mutation.SetCreatedAt(t)
	return asc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asc *AppStackCreate) SetNillableCreatedAt(t *time.Time) *AppStackCreate {
	if t != nil {
		asc.SetCreatedAt(*t)
	}
	return asc
}

// SetUpdatedAt sets the "updated_at" field.
func (asc *AppStackCreate) SetUpdatedAt(t time.Time) *AppStackCreate {
	asc.mutation.SetUpdatedAt(t)
	return asc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asc *AppStackCreate) SetNillableUpdatedAt(t *time.Time) *AppStackCreate {
	if t != nil {
		asc.SetUpdatedAt(*t)
	}
	return asc
}

// SetDeletedAt sets the "deleted_at" field.
func (asc *AppStackCreate) SetDeletedAt(t time.Time) *AppStackCreate {
	asc.mutation.SetDeletedAt(t)
	return asc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asc *AppStackCreate) SetNillableDeletedAt(t *time.Time) *AppStackCreate {
	if t != nil {
		asc.SetDeletedAt(*t)
	}
	return asc
}

// SetAppName sets the "app_name" field.
func (asc *AppStackCreate) SetAppName(s string) *AppStackCreate {
	asc.mutation.SetAppName(s)
	return asc
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (asc *AppStackCreate) SetNillableAppName(s *string) *AppStackCreate {
	if s != nil {
		asc.SetAppName(*s)
	}
	return asc
}

// SetEnvironment sets the "environment" field.
func (asc *AppStackCreate) SetEnvironment(s string) *AppStackCreate {
	asc.mutation.SetEnvironment(s)
	return asc
}

// SetNillableEnvironment sets the "environment" field if the given value is not nil.
func (asc *AppStackCreate) SetNillableEnvironment(s *string) *AppStackCreate {
	if s != nil {
		asc.SetEnvironment(*s)
	}
	return asc
}

// SetStack sets the "stack" field.
func (asc *AppStackCreate) SetStack(s string) *AppStackCreate {
	asc.mutation.SetStack(s)
	return asc
}

// SetID sets the "id" field.
func (asc *AppStackCreate) SetID(u uint) *AppStackCreate {
	asc.mutation.SetID(u)
	return asc
}

// Mutation returns the AppStackMutation object of the builder.
func (asc *AppStackCreate) Mutation() *AppStackMutation {
	return asc.mutation
}

// Save creates the AppStack in the database.
func (asc *AppStackCreate) Save(ctx context.Context) (*AppStack, error) {
	return withHooks[*AppStack, AppStackMutation](ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AppStackCreate) SaveX(ctx context.Context) *AppStack {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AppStackCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AppStackCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AppStackCreate) check() error {
	if _, ok := asc.mutation.Stack(); !ok {
		return &ValidationError{Name: "stack", err: errors.New(`ent: missing required field "AppStack.stack"`)}
	}
	return nil
}

func (asc *AppStackCreate) sqlSave(ctx context.Context) (*AppStack, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AppStackCreate) createSpec() (*AppStack, *sqlgraph.CreateSpec) {
	var (
		_node = &AppStack{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(appstack.Table, sqlgraph.NewFieldSpec(appstack.FieldID, field.TypeUint))
	)
	if id, ok := asc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := asc.mutation.CreatedAt(); ok {
		_spec.SetField(appstack.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := asc.mutation.UpdatedAt(); ok {
		_spec.SetField(appstack.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := asc.mutation.DeletedAt(); ok {
		_spec.SetField(appstack.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := asc.mutation.AppName(); ok {
		_spec.SetField(appstack.FieldAppName, field.TypeString, value)
		_node.AppName = value
	}
	if value, ok := asc.mutation.Environment(); ok {
		_spec.SetField(appstack.FieldEnvironment, field.TypeString, value)
		_node.Environment = value
	}
	if value, ok := asc.mutation.Stack(); ok {
		_spec.SetField(appstack.FieldStack, field.TypeString, value)
		_node.Stack = value
	}
	return _node, _spec
}

// AppStackCreateBulk is the builder for creating many AppStack entities in bulk.
type AppStackCreateBulk struct {
	config
	builders []*AppStackCreate
}

// Save creates the AppStack entities in the database.
func (ascb *AppStackCreateBulk) Save(ctx context.Context) ([]*AppStack, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AppStack, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppStackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AppStackCreateBulk) SaveX(ctx context.Context) []*AppStack {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AppStackCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AppStackCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}
