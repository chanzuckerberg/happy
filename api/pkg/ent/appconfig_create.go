// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chanzuckerberg/happy/api/pkg/ent/appconfig"
)

// AppConfigCreate is the builder for creating a AppConfig entity.
type AppConfigCreate struct {
	config
	mutation *AppConfigMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (_c *AppConfigCreate) SetCreatedAt(v time.Time) *AppConfigCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *AppConfigCreate) SetNillableCreatedAt(v *time.Time) *AppConfigCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *AppConfigCreate) SetUpdatedAt(v time.Time) *AppConfigCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *AppConfigCreate) SetNillableUpdatedAt(v *time.Time) *AppConfigCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *AppConfigCreate) SetDeletedAt(v time.Time) *AppConfigCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *AppConfigCreate) SetNillableDeletedAt(v *time.Time) *AppConfigCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetAppName sets the "app_name" field.
func (_c *AppConfigCreate) SetAppName(v string) *AppConfigCreate {
	_c.mutation.SetAppName(v)
	return _c
}

// SetEnvironment sets the "environment" field.
func (_c *AppConfigCreate) SetEnvironment(v string) *AppConfigCreate {
	_c.mutation.SetEnvironment(v)
	return _c
}

// SetStack sets the "stack" field.
func (_c *AppConfigCreate) SetStack(v string) *AppConfigCreate {
	_c.mutation.SetStack(v)
	return _c
}

// SetNillableStack sets the "stack" field if the given value is not nil.
func (_c *AppConfigCreate) SetNillableStack(v *string) *AppConfigCreate {
	if v != nil {
		_c.SetStack(*v)
	}
	return _c
}

// SetKey sets the "key" field.
func (_c *AppConfigCreate) SetKey(v string) *AppConfigCreate {
	_c.mutation.SetKey(v)
	return _c
}

// SetValue sets the "value" field.
func (_c *AppConfigCreate) SetValue(v string) *AppConfigCreate {
	_c.mutation.SetValue(v)
	return _c
}

// SetSource sets the "source" field.
func (_c *AppConfigCreate) SetSource(v appconfig.Source) *AppConfigCreate {
	_c.mutation.SetSource(v)
	return _c
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_c *AppConfigCreate) SetNillableSource(v *appconfig.Source) *AppConfigCreate {
	if v != nil {
		_c.SetSource(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *AppConfigCreate) SetID(v uint) *AppConfigCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the AppConfigMutation object of the builder.
func (_c *AppConfigCreate) Mutation() *AppConfigMutation {
	return _c.mutation
}

// Save creates the AppConfig in the database.
func (_c *AppConfigCreate) Save(ctx context.Context) (*AppConfig, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AppConfigCreate) SaveX(ctx context.Context) *AppConfig {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AppConfigCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AppConfigCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AppConfigCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if appconfig.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized appconfig.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := appconfig.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if appconfig.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appconfig.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appconfig.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Stack(); !ok {
		v := appconfig.DefaultStack
		_c.mutation.SetStack(v)
	}
	if _, ok := _c.mutation.Source(); !ok {
		v := appconfig.DefaultSource
		_c.mutation.SetSource(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *AppConfigCreate) check() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppConfig.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppConfig.updated_at"`)}
	}
	if _, ok := _c.mutation.AppName(); !ok {
		return &ValidationError{Name: "app_name", err: errors.New(`ent: missing required field "AppConfig.app_name"`)}
	}
	if _, ok := _c.mutation.Environment(); !ok {
		return &ValidationError{Name: "environment", err: errors.New(`ent: missing required field "AppConfig.environment"`)}
	}
	if _, ok := _c.mutation.Stack(); !ok {
		return &ValidationError{Name: "stack", err: errors.New(`ent: missing required field "AppConfig.stack"`)}
	}
	if _, ok := _c.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "AppConfig.key"`)}
	}
	if _, ok := _c.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "AppConfig.value"`)}
	}
	if _, ok := _c.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "AppConfig.source"`)}
	}
	if v, ok := _c.mutation.Source(); ok {
		if err := appconfig.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "AppConfig.source": %w`, err)}
		}
	}
	return nil
}

func (_c *AppConfigCreate) sqlSave(ctx context.Context) (*AppConfig, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AppConfigCreate) createSpec() (*AppConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &AppConfig{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(appconfig.Table, sqlgraph.NewFieldSpec(appconfig.FieldID, field.TypeUint))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(appconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(appconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(appconfig.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.AppName(); ok {
		_spec.SetField(appconfig.FieldAppName, field.TypeString, value)
		_node.AppName = value
	}
	if value, ok := _c.mutation.Environment(); ok {
		_spec.SetField(appconfig.FieldEnvironment, field.TypeString, value)
		_node.Environment = value
	}
	if value, ok := _c.mutation.Stack(); ok {
		_spec.SetField(appconfig.FieldStack, field.TypeString, value)
		_node.Stack = value
	}
	if value, ok := _c.mutation.Key(); ok {
		_spec.SetField(appconfig.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := _c.mutation.Value(); ok {
		_spec.SetField(appconfig.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := _c.mutation.Source(); ok {
		_spec.SetField(appconfig.FieldSource, field.TypeEnum, value)
		_node.Source = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppConfig.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *AppConfigCreate) OnConflict(opts ...sql.ConflictOption) *AppConfigUpsertOne {
	_c.conflict = opts
	return &AppConfigUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AppConfigCreate) OnConflictColumns(columns ...string) *AppConfigUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AppConfigUpsertOne{
		create: _c,
	}
}

type (
	// AppConfigUpsertOne is the builder for "upsert"-ing
	//  one AppConfig node.
	AppConfigUpsertOne struct {
		create *AppConfigCreate
	}

	// AppConfigUpsert is the "OnConflict" setter.
	AppConfigUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AppConfigUpsert) SetUpdatedAt(v time.Time) *AppConfigUpsert {
	u.Set(appconfig.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateUpdatedAt() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppConfigUpsert) SetDeletedAt(v time.Time) *AppConfigUpsert {
	u.Set(appconfig.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateDeletedAt() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AppConfigUpsert) ClearDeletedAt() *AppConfigUpsert {
	u.SetNull(appconfig.FieldDeletedAt)
	return u
}

// SetAppName sets the "app_name" field.
func (u *AppConfigUpsert) SetAppName(v string) *AppConfigUpsert {
	u.Set(appconfig.FieldAppName, v)
	return u
}

// UpdateAppName sets the "app_name" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateAppName() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldAppName)
	return u
}

// SetEnvironment sets the "environment" field.
func (u *AppConfigUpsert) SetEnvironment(v string) *AppConfigUpsert {
	u.Set(appconfig.FieldEnvironment, v)
	return u
}

// UpdateEnvironment sets the "environment" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateEnvironment() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldEnvironment)
	return u
}

// SetStack sets the "stack" field.
func (u *AppConfigUpsert) SetStack(v string) *AppConfigUpsert {
	u.Set(appconfig.FieldStack, v)
	return u
}

// UpdateStack sets the "stack" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateStack() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldStack)
	return u
}

// SetKey sets the "key" field.
func (u *AppConfigUpsert) SetKey(v string) *AppConfigUpsert {
	u.Set(appconfig.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateKey() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldKey)
	return u
}

// SetValue sets the "value" field.
func (u *AppConfigUpsert) SetValue(v string) *AppConfigUpsert {
	u.Set(appconfig.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateValue() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldValue)
	return u
}

// SetSource sets the "source" field.
func (u *AppConfigUpsert) SetSource(v appconfig.Source) *AppConfigUpsert {
	u.Set(appconfig.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *AppConfigUpsert) UpdateSource() *AppConfigUpsert {
	u.SetExcluded(appconfig.FieldSource)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppConfigUpsertOne) UpdateNewValues() *AppConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appconfig.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(appconfig.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppConfigUpsertOne) Ignore() *AppConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppConfigUpsertOne) DoNothing() *AppConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppConfigCreate.OnConflict
// documentation for more info.
func (u *AppConfigUpsertOne) Update(set func(*AppConfigUpsert)) *AppConfigUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppConfigUpsertOne) SetUpdatedAt(v time.Time) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateUpdatedAt() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppConfigUpsertOne) SetDeletedAt(v time.Time) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateDeletedAt() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AppConfigUpsertOne) ClearDeletedAt() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAppName sets the "app_name" field.
func (u *AppConfigUpsertOne) SetAppName(v string) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetAppName(v)
	})
}

// UpdateAppName sets the "app_name" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateAppName() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateAppName()
	})
}

// SetEnvironment sets the "environment" field.
func (u *AppConfigUpsertOne) SetEnvironment(v string) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetEnvironment(v)
	})
}

// UpdateEnvironment sets the "environment" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateEnvironment() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateEnvironment()
	})
}

// SetStack sets the "stack" field.
func (u *AppConfigUpsertOne) SetStack(v string) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetStack(v)
	})
}

// UpdateStack sets the "stack" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateStack() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateStack()
	})
}

// SetKey sets the "key" field.
func (u *AppConfigUpsertOne) SetKey(v string) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateKey() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *AppConfigUpsertOne) SetValue(v string) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateValue() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateValue()
	})
}

// SetSource sets the "source" field.
func (u *AppConfigUpsertOne) SetSource(v appconfig.Source) *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *AppConfigUpsertOne) UpdateSource() *AppConfigUpsertOne {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSource()
	})
}

// Exec executes the query.
func (u *AppConfigUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppConfigCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppConfigUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppConfigUpsertOne) ID(ctx context.Context) (id uint, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppConfigUpsertOne) IDX(ctx context.Context) uint {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppConfigCreateBulk is the builder for creating many AppConfig entities in bulk.
type AppConfigCreateBulk struct {
	config
	err      error
	builders []*AppConfigCreate
	conflict []sql.ConflictOption
}

// Save creates the AppConfig entities in the database.
func (_c *AppConfigCreateBulk) Save(ctx context.Context) ([]*AppConfig, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AppConfig, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AppConfigCreateBulk) SaveX(ctx context.Context) []*AppConfig {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AppConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AppConfigCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppConfig.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppConfigUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (_c *AppConfigCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppConfigUpsertBulk {
	_c.conflict = opts
	return &AppConfigUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *AppConfigCreateBulk) OnConflictColumns(columns ...string) *AppConfigUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &AppConfigUpsertBulk{
		create: _c,
	}
}

// AppConfigUpsertBulk is the builder for "upsert"-ing
// a bulk of AppConfig nodes.
type AppConfigUpsertBulk struct {
	create *AppConfigCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appconfig.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppConfigUpsertBulk) UpdateNewValues() *AppConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appconfig.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(appconfig.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppConfig.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppConfigUpsertBulk) Ignore() *AppConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppConfigUpsertBulk) DoNothing() *AppConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppConfigCreateBulk.OnConflict
// documentation for more info.
func (u *AppConfigUpsertBulk) Update(set func(*AppConfigUpsert)) *AppConfigUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppConfigUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppConfigUpsertBulk) SetUpdatedAt(v time.Time) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateUpdatedAt() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *AppConfigUpsertBulk) SetDeletedAt(v time.Time) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateDeletedAt() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *AppConfigUpsertBulk) ClearDeletedAt() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.ClearDeletedAt()
	})
}

// SetAppName sets the "app_name" field.
func (u *AppConfigUpsertBulk) SetAppName(v string) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetAppName(v)
	})
}

// UpdateAppName sets the "app_name" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateAppName() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateAppName()
	})
}

// SetEnvironment sets the "environment" field.
func (u *AppConfigUpsertBulk) SetEnvironment(v string) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetEnvironment(v)
	})
}

// UpdateEnvironment sets the "environment" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateEnvironment() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateEnvironment()
	})
}

// SetStack sets the "stack" field.
func (u *AppConfigUpsertBulk) SetStack(v string) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetStack(v)
	})
}

// UpdateStack sets the "stack" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateStack() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateStack()
	})
}

// SetKey sets the "key" field.
func (u *AppConfigUpsertBulk) SetKey(v string) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateKey() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateKey()
	})
}

// SetValue sets the "value" field.
func (u *AppConfigUpsertBulk) SetValue(v string) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateValue() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateValue()
	})
}

// SetSource sets the "source" field.
func (u *AppConfigUpsertBulk) SetSource(v appconfig.Source) *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *AppConfigUpsertBulk) UpdateSource() *AppConfigUpsertBulk {
	return u.Update(func(s *AppConfigUpsert) {
		s.UpdateSource()
	})
}

// Exec executes the query.
func (u *AppConfigUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppConfigCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppConfigCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppConfigUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
