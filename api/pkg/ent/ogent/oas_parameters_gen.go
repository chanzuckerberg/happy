// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// DeleteAppConfigParams is parameters of deleteAppConfig operation.
type DeleteAppConfigParams struct {
	AppName             string
	Environment         string
	Stack               OptString
	AWSProfile          string
	AWSRegion           string
	K8sNamespace        string
	K8sClusterID        string
	XAWSAccessKeyID     string
	XAWSSecretAccessKey string
	XAWSSessionToken    string
	Key                 string
}

func unpackDeleteAppConfigParams(packed middleware.Parameters) (params DeleteAppConfigParams) {
	{
		key := middleware.ParameterKey{
			Name: "app_name",
			In:   "query",
		}
		params.AppName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment",
			In:   "query",
		}
		params.Environment = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "stack",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Stack = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "aws_profile",
			In:   "query",
		}
		params.AWSProfile = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "aws_region",
			In:   "query",
		}
		params.AWSRegion = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "k8s_namespace",
			In:   "query",
		}
		params.K8sNamespace = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "k8s_cluster_id",
			In:   "query",
		}
		params.K8sClusterID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Aws-Access-Key-Id",
			In:   "header",
		}
		params.XAWSAccessKeyID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Aws-Secret-Access-Key",
			In:   "header",
		}
		params.XAWSSecretAccessKey = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Aws-Session-Token",
			In:   "header",
		}
		params.XAWSSessionToken = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "path",
		}
		params.Key = packed[key].(string)
	}
	return params
}

func decodeDeleteAppConfigParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteAppConfigParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode query: app_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "app_name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppName = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: environment.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Environment = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: stack.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "stack",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStackVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStackVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Stack.SetTo(paramsDotStackVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "stack",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: aws_profile.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "aws_profile",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AWSProfile = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "aws_profile",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: aws_region.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "aws_region",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AWSRegion = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "aws_region",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: k8s_namespace.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "k8s_namespace",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.K8sNamespace = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "k8s_namespace",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: k8s_cluster_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "k8s_cluster_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.K8sClusterID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "k8s_cluster_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode header: X-Aws-Access-Key-Id.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Aws-Access-Key-Id",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XAWSAccessKeyID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Aws-Access-Key-Id",
			In:   "header",
			Err:  err,
		}
	}
	// Decode header: X-Aws-Secret-Access-Key.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Aws-Secret-Access-Key",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XAWSSecretAccessKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Aws-Secret-Access-Key",
			In:   "header",
			Err:  err,
		}
	}
	// Decode header: X-Aws-Session-Token.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Aws-Session-Token",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XAWSSessionToken = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Aws-Session-Token",
			In:   "header",
			Err:  err,
		}
	}
	// Decode path: key.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "key",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Key = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ListAppConfigParams is parameters of listAppConfig operation.
type ListAppConfigParams struct {
	// What page to render.
	Page OptInt
	// Item count to render per page.
	ItemsPerPage        OptInt
	AppName             string
	Environment         string
	Stack               OptString
	AWSProfile          string
	AWSRegion           string
	K8sNamespace        string
	K8sClusterID        string
	XAWSAccessKeyID     string
	XAWSSecretAccessKey string
	XAWSSessionToken    string
}

func unpackListAppConfigParams(packed middleware.Parameters) (params ListAppConfigParams) {
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "itemsPerPage",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ItemsPerPage = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "app_name",
			In:   "query",
		}
		params.AppName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment",
			In:   "query",
		}
		params.Environment = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "stack",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Stack = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "aws_profile",
			In:   "query",
		}
		params.AWSProfile = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "aws_region",
			In:   "query",
		}
		params.AWSRegion = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "k8s_namespace",
			In:   "query",
		}
		params.K8sNamespace = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "k8s_cluster_id",
			In:   "query",
		}
		params.K8sClusterID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Aws-Access-Key-Id",
			In:   "header",
		}
		params.XAWSAccessKeyID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Aws-Secret-Access-Key",
			In:   "header",
		}
		params.XAWSSecretAccessKey = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Aws-Session-Token",
			In:   "header",
		}
		params.XAWSSessionToken = packed[key].(string)
	}
	return params
}

func decodeListAppConfigParams(args [0]string, argsEscaped bool, r *http.Request) (params ListAppConfigParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: itemsPerPage.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "itemsPerPage",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotItemsPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotItemsPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ItemsPerPage.SetTo(paramsDotItemsPerPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.ItemsPerPage.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "itemsPerPage",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: app_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "app_name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppName = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: environment.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Environment = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: stack.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "stack",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStackVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStackVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Stack.SetTo(paramsDotStackVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "stack",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: aws_profile.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "aws_profile",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AWSProfile = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "aws_profile",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: aws_region.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "aws_region",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AWSRegion = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "aws_region",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: k8s_namespace.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "k8s_namespace",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.K8sNamespace = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "k8s_namespace",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: k8s_cluster_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "k8s_cluster_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.K8sClusterID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "k8s_cluster_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode header: X-Aws-Access-Key-Id.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Aws-Access-Key-Id",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XAWSAccessKeyID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Aws-Access-Key-Id",
			In:   "header",
			Err:  err,
		}
	}
	// Decode header: X-Aws-Secret-Access-Key.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Aws-Secret-Access-Key",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XAWSSecretAccessKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Aws-Secret-Access-Key",
			In:   "header",
			Err:  err,
		}
	}
	// Decode header: X-Aws-Session-Token.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Aws-Session-Token",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XAWSSessionToken = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Aws-Session-Token",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// ReadAppConfigParams is parameters of readAppConfig operation.
type ReadAppConfigParams struct {
	AppName             string
	Environment         string
	Stack               OptString
	AWSProfile          string
	AWSRegion           string
	K8sNamespace        string
	K8sClusterID        string
	XAWSAccessKeyID     string
	XAWSSecretAccessKey string
	XAWSSessionToken    string
	Key                 string
}

func unpackReadAppConfigParams(packed middleware.Parameters) (params ReadAppConfigParams) {
	{
		key := middleware.ParameterKey{
			Name: "app_name",
			In:   "query",
		}
		params.AppName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment",
			In:   "query",
		}
		params.Environment = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "stack",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Stack = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "aws_profile",
			In:   "query",
		}
		params.AWSProfile = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "aws_region",
			In:   "query",
		}
		params.AWSRegion = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "k8s_namespace",
			In:   "query",
		}
		params.K8sNamespace = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "k8s_cluster_id",
			In:   "query",
		}
		params.K8sClusterID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Aws-Access-Key-Id",
			In:   "header",
		}
		params.XAWSAccessKeyID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Aws-Secret-Access-Key",
			In:   "header",
		}
		params.XAWSSecretAccessKey = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Aws-Session-Token",
			In:   "header",
		}
		params.XAWSSessionToken = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "key",
			In:   "path",
		}
		params.Key = packed[key].(string)
	}
	return params
}

func decodeReadAppConfigParams(args [1]string, argsEscaped bool, r *http.Request) (params ReadAppConfigParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode query: app_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "app_name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppName = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: environment.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Environment = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: stack.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "stack",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStackVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStackVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Stack.SetTo(paramsDotStackVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "stack",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: aws_profile.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "aws_profile",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AWSProfile = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "aws_profile",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: aws_region.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "aws_region",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AWSRegion = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "aws_region",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: k8s_namespace.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "k8s_namespace",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.K8sNamespace = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "k8s_namespace",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: k8s_cluster_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "k8s_cluster_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.K8sClusterID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "k8s_cluster_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode header: X-Aws-Access-Key-Id.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Aws-Access-Key-Id",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XAWSAccessKeyID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Aws-Access-Key-Id",
			In:   "header",
			Err:  err,
		}
	}
	// Decode header: X-Aws-Secret-Access-Key.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Aws-Secret-Access-Key",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XAWSSecretAccessKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Aws-Secret-Access-Key",
			In:   "header",
			Err:  err,
		}
	}
	// Decode header: X-Aws-Session-Token.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Aws-Session-Token",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XAWSSessionToken = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Aws-Session-Token",
			In:   "header",
			Err:  err,
		}
	}
	// Decode path: key.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "key",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Key = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "key",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SetAppConfigParams is parameters of setAppConfig operation.
type SetAppConfigParams struct {
	// What page to render.
	Page OptInt
	// Item count to render per page.
	ItemsPerPage        OptInt
	AppName             string
	Environment         string
	Stack               OptString
	AWSProfile          string
	AWSRegion           string
	K8sNamespace        string
	K8sClusterID        string
	XAWSAccessKeyID     string
	XAWSSecretAccessKey string
	XAWSSessionToken    string
}

func unpackSetAppConfigParams(packed middleware.Parameters) (params SetAppConfigParams) {
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "itemsPerPage",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ItemsPerPage = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "app_name",
			In:   "query",
		}
		params.AppName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "environment",
			In:   "query",
		}
		params.Environment = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "stack",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Stack = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "aws_profile",
			In:   "query",
		}
		params.AWSProfile = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "aws_region",
			In:   "query",
		}
		params.AWSRegion = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "k8s_namespace",
			In:   "query",
		}
		params.K8sNamespace = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "k8s_cluster_id",
			In:   "query",
		}
		params.K8sClusterID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Aws-Access-Key-Id",
			In:   "header",
		}
		params.XAWSAccessKeyID = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Aws-Secret-Access-Key",
			In:   "header",
		}
		params.XAWSSecretAccessKey = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Aws-Session-Token",
			In:   "header",
		}
		params.XAWSSessionToken = packed[key].(string)
	}
	return params
}

func decodeSetAppConfigParams(args [0]string, argsEscaped bool, r *http.Request) (params SetAppConfigParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: itemsPerPage.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "itemsPerPage",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotItemsPerPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotItemsPerPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ItemsPerPage.SetTo(paramsDotItemsPerPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.ItemsPerPage.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "itemsPerPage",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: app_name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "app_name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AppName = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "app_name",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: environment.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "environment",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Environment = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "environment",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: stack.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "stack",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStackVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStackVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Stack.SetTo(paramsDotStackVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "stack",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: aws_profile.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "aws_profile",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AWSProfile = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "aws_profile",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: aws_region.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "aws_region",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AWSRegion = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "aws_region",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: k8s_namespace.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "k8s_namespace",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.K8sNamespace = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "k8s_namespace",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: k8s_cluster_id.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "k8s_cluster_id",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.K8sClusterID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "k8s_cluster_id",
			In:   "query",
			Err:  err,
		}
	}
	// Decode header: X-Aws-Access-Key-Id.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Aws-Access-Key-Id",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XAWSAccessKeyID = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Aws-Access-Key-Id",
			In:   "header",
			Err:  err,
		}
	}
	// Decode header: X-Aws-Secret-Access-Key.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Aws-Secret-Access-Key",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XAWSSecretAccessKey = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Aws-Secret-Access-Key",
			In:   "header",
			Err:  err,
		}
	}
	// Decode header: X-Aws-Session-Token.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Aws-Session-Token",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.XAWSSessionToken = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Aws-Session-Token",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}
