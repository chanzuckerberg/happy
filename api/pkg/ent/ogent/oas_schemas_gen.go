// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// Ref: #/components/schemas/AppConfigList
type AppConfigList struct {
	ID          int64               `json:"id"`
	CreatedAt   time.Time           `json:"created_at"`
	UpdatedAt   time.Time           `json:"updated_at"`
	DeletedAt   OptDateTime         `json:"deleted_at"`
	AppName     string              `json:"app_name"`
	Environment string              `json:"environment"`
	Stack       string              `json:"stack"`
	Key         string              `json:"key"`
	Value       string              `json:"value"`
	Source      AppConfigListSource `json:"source"`
}

// GetID returns the value of ID.
func (s *AppConfigList) GetID() int64 {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AppConfigList) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *AppConfigList) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *AppConfigList) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetAppName returns the value of AppName.
func (s *AppConfigList) GetAppName() string {
	return s.AppName
}

// GetEnvironment returns the value of Environment.
func (s *AppConfigList) GetEnvironment() string {
	return s.Environment
}

// GetStack returns the value of Stack.
func (s *AppConfigList) GetStack() string {
	return s.Stack
}

// GetKey returns the value of Key.
func (s *AppConfigList) GetKey() string {
	return s.Key
}

// GetValue returns the value of Value.
func (s *AppConfigList) GetValue() string {
	return s.Value
}

// GetSource returns the value of Source.
func (s *AppConfigList) GetSource() AppConfigListSource {
	return s.Source
}

// SetID sets the value of ID.
func (s *AppConfigList) SetID(val int64) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AppConfigList) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *AppConfigList) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *AppConfigList) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetAppName sets the value of AppName.
func (s *AppConfigList) SetAppName(val string) {
	s.AppName = val
}

// SetEnvironment sets the value of Environment.
func (s *AppConfigList) SetEnvironment(val string) {
	s.Environment = val
}

// SetStack sets the value of Stack.
func (s *AppConfigList) SetStack(val string) {
	s.Stack = val
}

// SetKey sets the value of Key.
func (s *AppConfigList) SetKey(val string) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *AppConfigList) SetValue(val string) {
	s.Value = val
}

// SetSource sets the value of Source.
func (s *AppConfigList) SetSource(val AppConfigListSource) {
	s.Source = val
}

type AppConfigListSource string

const (
	AppConfigListSourceStack       AppConfigListSource = "stack"
	AppConfigListSourceEnvironment AppConfigListSource = "environment"
)

// AllValues returns all AppConfigListSource values.
func (AppConfigListSource) AllValues() []AppConfigListSource {
	return []AppConfigListSource{
		AppConfigListSourceStack,
		AppConfigListSourceEnvironment,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppConfigListSource) MarshalText() ([]byte, error) {
	switch s {
	case AppConfigListSourceStack:
		return []byte(s), nil
	case AppConfigListSourceEnvironment:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppConfigListSource) UnmarshalText(data []byte) error {
	switch AppConfigListSource(data) {
	case AppConfigListSourceStack:
		*s = AppConfigListSourceStack
		return nil
	case AppConfigListSourceEnvironment:
		*s = AppConfigListSourceEnvironment
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AppConfigRead
type AppConfigRead struct {
	ID          int64               `json:"id"`
	CreatedAt   time.Time           `json:"created_at"`
	UpdatedAt   time.Time           `json:"updated_at"`
	DeletedAt   OptDateTime         `json:"deleted_at"`
	AppName     string              `json:"app_name"`
	Environment string              `json:"environment"`
	Stack       string              `json:"stack"`
	Key         string              `json:"key"`
	Value       string              `json:"value"`
	Source      AppConfigReadSource `json:"source"`
}

// GetID returns the value of ID.
func (s *AppConfigRead) GetID() int64 {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AppConfigRead) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *AppConfigRead) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetDeletedAt returns the value of DeletedAt.
func (s *AppConfigRead) GetDeletedAt() OptDateTime {
	return s.DeletedAt
}

// GetAppName returns the value of AppName.
func (s *AppConfigRead) GetAppName() string {
	return s.AppName
}

// GetEnvironment returns the value of Environment.
func (s *AppConfigRead) GetEnvironment() string {
	return s.Environment
}

// GetStack returns the value of Stack.
func (s *AppConfigRead) GetStack() string {
	return s.Stack
}

// GetKey returns the value of Key.
func (s *AppConfigRead) GetKey() string {
	return s.Key
}

// GetValue returns the value of Value.
func (s *AppConfigRead) GetValue() string {
	return s.Value
}

// GetSource returns the value of Source.
func (s *AppConfigRead) GetSource() AppConfigReadSource {
	return s.Source
}

// SetID sets the value of ID.
func (s *AppConfigRead) SetID(val int64) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AppConfigRead) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *AppConfigRead) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetDeletedAt sets the value of DeletedAt.
func (s *AppConfigRead) SetDeletedAt(val OptDateTime) {
	s.DeletedAt = val
}

// SetAppName sets the value of AppName.
func (s *AppConfigRead) SetAppName(val string) {
	s.AppName = val
}

// SetEnvironment sets the value of Environment.
func (s *AppConfigRead) SetEnvironment(val string) {
	s.Environment = val
}

// SetStack sets the value of Stack.
func (s *AppConfigRead) SetStack(val string) {
	s.Stack = val
}

// SetKey sets the value of Key.
func (s *AppConfigRead) SetKey(val string) {
	s.Key = val
}

// SetValue sets the value of Value.
func (s *AppConfigRead) SetValue(val string) {
	s.Value = val
}

// SetSource sets the value of Source.
func (s *AppConfigRead) SetSource(val AppConfigReadSource) {
	s.Source = val
}

func (*AppConfigRead) readAppConfigRes() {}

type AppConfigReadSource string

const (
	AppConfigReadSourceStack       AppConfigReadSource = "stack"
	AppConfigReadSourceEnvironment AppConfigReadSource = "environment"
)

// AllValues returns all AppConfigReadSource values.
func (AppConfigReadSource) AllValues() []AppConfigReadSource {
	return []AppConfigReadSource{
		AppConfigReadSourceStack,
		AppConfigReadSourceEnvironment,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AppConfigReadSource) MarshalText() ([]byte, error) {
	switch s {
	case AppConfigReadSourceStack:
		return []byte(s), nil
	case AppConfigReadSourceEnvironment:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AppConfigReadSource) UnmarshalText(data []byte) error {
	switch AppConfigReadSource(data) {
	case AppConfigReadSourceStack:
		*s = AppConfigReadSourceStack
		return nil
	case AppConfigReadSourceEnvironment:
		*s = AppConfigReadSourceEnvironment
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListAppConfigOKApplicationJSON []AppConfigList

func (*ListAppConfigOKApplicationJSON) listAppConfigRes() {}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type R400 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R400) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R400) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R400) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R400) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R400) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R400) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R400) listAppConfigRes() {}
func (*R400) readAppConfigRes() {}

type R404 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R404) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R404) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R404) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R404) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R404) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R404) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R404) listAppConfigRes() {}
func (*R404) readAppConfigRes() {}

type R409 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R409) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R409) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R409) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R409) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R409) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R409) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R409) listAppConfigRes() {}
func (*R409) readAppConfigRes() {}

type R500 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R500) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R500) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R500) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R500) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R500) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R500) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R500) listAppConfigRes() {}
func (*R500) readAppConfigRes() {}
