// Code generated by ent, DO NOT EDIT.

package ogent

import "github.com/chanzuckerberg/happy/api/pkg/ent"

func NewAppConfigList(e *ent.AppConfig) *AppConfigList {
	if e == nil {
		return nil
	}
	var ret AppConfigList
	ret.ID = int64(e.ID)
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	ret.DeletedAt = NewOptDateTime(e.DeletedAt)
	ret.AppName = NewOptString(e.AppName)
	ret.Environment = NewOptString(e.Environment)
	ret.Stack = NewOptString(e.Stack)
	ret.Key = NewOptString(e.Key)
	ret.Value = NewOptString(e.Value)
	return &ret
}

func NewAppConfigLists(es []*ent.AppConfig) []AppConfigList {
	if len(es) == 0 {
		return nil
	}
	r := make([]AppConfigList, len(es))
	for i, e := range es {
		r[i] = NewAppConfigList(e).Elem()
	}
	return r
}

func (ac *AppConfigList) Elem() AppConfigList {
	if ac == nil {
		return AppConfigList{}
	}
	return *ac
}

func NewAppConfigRead(e *ent.AppConfig) *AppConfigRead {
	if e == nil {
		return nil
	}
	var ret AppConfigRead
	ret.ID = int64(e.ID)
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	ret.DeletedAt = NewOptDateTime(e.DeletedAt)
	ret.AppName = NewOptString(e.AppName)
	ret.Environment = NewOptString(e.Environment)
	ret.Stack = NewOptString(e.Stack)
	ret.Key = NewOptString(e.Key)
	ret.Value = NewOptString(e.Value)
	return &ret
}

func NewAppConfigReads(es []*ent.AppConfig) []AppConfigRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]AppConfigRead, len(es))
	for i, e := range es {
		r[i] = NewAppConfigRead(e).Elem()
	}
	return r
}

func (ac *AppConfigRead) Elem() AppConfigRead {
	if ac == nil {
		return AppConfigRead{}
	}
	return *ac
}

func NewAppStackList(e *ent.AppStack) *AppStackList {
	if e == nil {
		return nil
	}
	var ret AppStackList
	ret.ID = int64(e.ID)
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	ret.DeletedAt = NewOptDateTime(e.DeletedAt)
	ret.AppName = NewOptString(e.AppName)
	ret.Environment = NewOptString(e.Environment)
	ret.Stack = e.Stack
	return &ret
}

func NewAppStackLists(es []*ent.AppStack) []AppStackList {
	if len(es) == 0 {
		return nil
	}
	r := make([]AppStackList, len(es))
	for i, e := range es {
		r[i] = NewAppStackList(e).Elem()
	}
	return r
}

func (as *AppStackList) Elem() AppStackList {
	if as == nil {
		return AppStackList{}
	}
	return *as
}

func NewAppStackRead(e *ent.AppStack) *AppStackRead {
	if e == nil {
		return nil
	}
	var ret AppStackRead
	ret.ID = int64(e.ID)
	ret.CreatedAt = NewOptDateTime(e.CreatedAt)
	ret.UpdatedAt = NewOptDateTime(e.UpdatedAt)
	ret.DeletedAt = NewOptDateTime(e.DeletedAt)
	ret.AppName = NewOptString(e.AppName)
	ret.Environment = NewOptString(e.Environment)
	ret.Stack = e.Stack
	return &ret
}

func NewAppStackReads(es []*ent.AppStack) []AppStackRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]AppStackRead, len(es))
	for i, e := range es {
		r[i] = NewAppStackRead(e).Elem()
	}
	return r
}

func (as *AppStackRead) Elem() AppStackRead {
	if as == nil {
		return AppStackRead{}
	}
	return *as
}
