// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chanzuckerberg/happy/api/pkg/ent/appconfig"
	"github.com/chanzuckerberg/happy/api/pkg/ent/predicate"
)

// AppConfigUpdate is the builder for updating AppConfig entities.
type AppConfigUpdate struct {
	config
	hooks    []Hook
	mutation *AppConfigMutation
}

// Where appends a list predicates to the AppConfigUpdate builder.
func (_u *AppConfigUpdate) Where(ps ...predicate.AppConfig) *AppConfigUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AppConfigUpdate) SetUpdatedAt(v time.Time) *AppConfigUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *AppConfigUpdate) SetDeletedAt(v time.Time) *AppConfigUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *AppConfigUpdate) SetNillableDeletedAt(v *time.Time) *AppConfigUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *AppConfigUpdate) ClearDeletedAt() *AppConfigUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetAppName sets the "app_name" field.
func (_u *AppConfigUpdate) SetAppName(v string) *AppConfigUpdate {
	_u.mutation.SetAppName(v)
	return _u
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (_u *AppConfigUpdate) SetNillableAppName(v *string) *AppConfigUpdate {
	if v != nil {
		_u.SetAppName(*v)
	}
	return _u
}

// SetEnvironment sets the "environment" field.
func (_u *AppConfigUpdate) SetEnvironment(v string) *AppConfigUpdate {
	_u.mutation.SetEnvironment(v)
	return _u
}

// SetNillableEnvironment sets the "environment" field if the given value is not nil.
func (_u *AppConfigUpdate) SetNillableEnvironment(v *string) *AppConfigUpdate {
	if v != nil {
		_u.SetEnvironment(*v)
	}
	return _u
}

// SetStack sets the "stack" field.
func (_u *AppConfigUpdate) SetStack(v string) *AppConfigUpdate {
	_u.mutation.SetStack(v)
	return _u
}

// SetNillableStack sets the "stack" field if the given value is not nil.
func (_u *AppConfigUpdate) SetNillableStack(v *string) *AppConfigUpdate {
	if v != nil {
		_u.SetStack(*v)
	}
	return _u
}

// SetKey sets the "key" field.
func (_u *AppConfigUpdate) SetKey(v string) *AppConfigUpdate {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *AppConfigUpdate) SetNillableKey(v *string) *AppConfigUpdate {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *AppConfigUpdate) SetValue(v string) *AppConfigUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *AppConfigUpdate) SetNillableValue(v *string) *AppConfigUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetSource sets the "source" field.
func (_u *AppConfigUpdate) SetSource(v appconfig.Source) *AppConfigUpdate {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *AppConfigUpdate) SetNillableSource(v *appconfig.Source) *AppConfigUpdate {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// Mutation returns the AppConfigMutation object of the builder.
func (_u *AppConfigUpdate) Mutation() *AppConfigMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AppConfigUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AppConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AppConfigUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AppConfigUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AppConfigUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		if appconfig.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appconfig.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appconfig.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *AppConfigUpdate) check() error {
	if v, ok := _u.mutation.Source(); ok {
		if err := appconfig.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "AppConfig.source": %w`, err)}
		}
	}
	return nil
}

func (_u *AppConfigUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appconfig.Table, appconfig.Columns, sqlgraph.NewFieldSpec(appconfig.FieldID, field.TypeUint))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(appconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(appconfig.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(appconfig.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.AppName(); ok {
		_spec.SetField(appconfig.FieldAppName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Environment(); ok {
		_spec.SetField(appconfig.FieldEnvironment, field.TypeString, value)
	}
	if value, ok := _u.mutation.Stack(); ok {
		_spec.SetField(appconfig.FieldStack, field.TypeString, value)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(appconfig.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(appconfig.FieldValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(appconfig.FieldSource, field.TypeEnum, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AppConfigUpdateOne is the builder for updating a single AppConfig entity.
type AppConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppConfigMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *AppConfigUpdateOne) SetUpdatedAt(v time.Time) *AppConfigUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *AppConfigUpdateOne) SetDeletedAt(v time.Time) *AppConfigUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *AppConfigUpdateOne) SetNillableDeletedAt(v *time.Time) *AppConfigUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *AppConfigUpdateOne) ClearDeletedAt() *AppConfigUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetAppName sets the "app_name" field.
func (_u *AppConfigUpdateOne) SetAppName(v string) *AppConfigUpdateOne {
	_u.mutation.SetAppName(v)
	return _u
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (_u *AppConfigUpdateOne) SetNillableAppName(v *string) *AppConfigUpdateOne {
	if v != nil {
		_u.SetAppName(*v)
	}
	return _u
}

// SetEnvironment sets the "environment" field.
func (_u *AppConfigUpdateOne) SetEnvironment(v string) *AppConfigUpdateOne {
	_u.mutation.SetEnvironment(v)
	return _u
}

// SetNillableEnvironment sets the "environment" field if the given value is not nil.
func (_u *AppConfigUpdateOne) SetNillableEnvironment(v *string) *AppConfigUpdateOne {
	if v != nil {
		_u.SetEnvironment(*v)
	}
	return _u
}

// SetStack sets the "stack" field.
func (_u *AppConfigUpdateOne) SetStack(v string) *AppConfigUpdateOne {
	_u.mutation.SetStack(v)
	return _u
}

// SetNillableStack sets the "stack" field if the given value is not nil.
func (_u *AppConfigUpdateOne) SetNillableStack(v *string) *AppConfigUpdateOne {
	if v != nil {
		_u.SetStack(*v)
	}
	return _u
}

// SetKey sets the "key" field.
func (_u *AppConfigUpdateOne) SetKey(v string) *AppConfigUpdateOne {
	_u.mutation.SetKey(v)
	return _u
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (_u *AppConfigUpdateOne) SetNillableKey(v *string) *AppConfigUpdateOne {
	if v != nil {
		_u.SetKey(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *AppConfigUpdateOne) SetValue(v string) *AppConfigUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *AppConfigUpdateOne) SetNillableValue(v *string) *AppConfigUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetSource sets the "source" field.
func (_u *AppConfigUpdateOne) SetSource(v appconfig.Source) *AppConfigUpdateOne {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *AppConfigUpdateOne) SetNillableSource(v *appconfig.Source) *AppConfigUpdateOne {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// Mutation returns the AppConfigMutation object of the builder.
func (_u *AppConfigUpdateOne) Mutation() *AppConfigMutation {
	return _u.mutation
}

// Where appends a list predicates to the AppConfigUpdate builder.
func (_u *AppConfigUpdateOne) Where(ps ...predicate.AppConfig) *AppConfigUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AppConfigUpdateOne) Select(field string, fields ...string) *AppConfigUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AppConfig entity.
func (_u *AppConfigUpdateOne) Save(ctx context.Context) (*AppConfig, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AppConfigUpdateOne) SaveX(ctx context.Context) *AppConfig {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AppConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AppConfigUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *AppConfigUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		if appconfig.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized appconfig.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := appconfig.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *AppConfigUpdateOne) check() error {
	if v, ok := _u.mutation.Source(); ok {
		if err := appconfig.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "AppConfig.source": %w`, err)}
		}
	}
	return nil
}

func (_u *AppConfigUpdateOne) sqlSave(ctx context.Context) (_node *AppConfig, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appconfig.Table, appconfig.Columns, sqlgraph.NewFieldSpec(appconfig.FieldID, field.TypeUint))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appconfig.FieldID)
		for _, f := range fields {
			if !appconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(appconfig.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(appconfig.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(appconfig.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.AppName(); ok {
		_spec.SetField(appconfig.FieldAppName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Environment(); ok {
		_spec.SetField(appconfig.FieldEnvironment, field.TypeString, value)
	}
	if value, ok := _u.mutation.Stack(); ok {
		_spec.SetField(appconfig.FieldStack, field.TypeString, value)
	}
	if value, ok := _u.mutation.Key(); ok {
		_spec.SetField(appconfig.FieldKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(appconfig.FieldValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(appconfig.FieldSource, field.TypeEnum, value)
	}
	_node = &AppConfig{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
