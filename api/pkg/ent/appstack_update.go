// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chanzuckerberg/happy/api/pkg/ent/appstack"
	"github.com/chanzuckerberg/happy/api/pkg/ent/predicate"
)

// AppStackUpdate is the builder for updating AppStack entities.
type AppStackUpdate struct {
	config
	hooks    []Hook
	mutation *AppStackMutation
}

// Where appends a list predicates to the AppStackUpdate builder.
func (asu *AppStackUpdate) Where(ps ...predicate.AppStack) *AppStackUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetCreatedAt sets the "created_at" field.
func (asu *AppStackUpdate) SetCreatedAt(t time.Time) *AppStackUpdate {
	asu.mutation.SetCreatedAt(t)
	return asu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asu *AppStackUpdate) SetNillableCreatedAt(t *time.Time) *AppStackUpdate {
	if t != nil {
		asu.SetCreatedAt(*t)
	}
	return asu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (asu *AppStackUpdate) ClearCreatedAt() *AppStackUpdate {
	asu.mutation.ClearCreatedAt()
	return asu
}

// SetUpdatedAt sets the "updated_at" field.
func (asu *AppStackUpdate) SetUpdatedAt(t time.Time) *AppStackUpdate {
	asu.mutation.SetUpdatedAt(t)
	return asu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asu *AppStackUpdate) SetNillableUpdatedAt(t *time.Time) *AppStackUpdate {
	if t != nil {
		asu.SetUpdatedAt(*t)
	}
	return asu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (asu *AppStackUpdate) ClearUpdatedAt() *AppStackUpdate {
	asu.mutation.ClearUpdatedAt()
	return asu
}

// SetDeletedAt sets the "deleted_at" field.
func (asu *AppStackUpdate) SetDeletedAt(t time.Time) *AppStackUpdate {
	asu.mutation.SetDeletedAt(t)
	return asu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asu *AppStackUpdate) SetNillableDeletedAt(t *time.Time) *AppStackUpdate {
	if t != nil {
		asu.SetDeletedAt(*t)
	}
	return asu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (asu *AppStackUpdate) ClearDeletedAt() *AppStackUpdate {
	asu.mutation.ClearDeletedAt()
	return asu
}

// SetAppName sets the "app_name" field.
func (asu *AppStackUpdate) SetAppName(s string) *AppStackUpdate {
	asu.mutation.SetAppName(s)
	return asu
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (asu *AppStackUpdate) SetNillableAppName(s *string) *AppStackUpdate {
	if s != nil {
		asu.SetAppName(*s)
	}
	return asu
}

// ClearAppName clears the value of the "app_name" field.
func (asu *AppStackUpdate) ClearAppName() *AppStackUpdate {
	asu.mutation.ClearAppName()
	return asu
}

// SetEnvironment sets the "environment" field.
func (asu *AppStackUpdate) SetEnvironment(s string) *AppStackUpdate {
	asu.mutation.SetEnvironment(s)
	return asu
}

// SetNillableEnvironment sets the "environment" field if the given value is not nil.
func (asu *AppStackUpdate) SetNillableEnvironment(s *string) *AppStackUpdate {
	if s != nil {
		asu.SetEnvironment(*s)
	}
	return asu
}

// ClearEnvironment clears the value of the "environment" field.
func (asu *AppStackUpdate) ClearEnvironment() *AppStackUpdate {
	asu.mutation.ClearEnvironment()
	return asu
}

// SetStack sets the "stack" field.
func (asu *AppStackUpdate) SetStack(s string) *AppStackUpdate {
	asu.mutation.SetStack(s)
	return asu
}

// Mutation returns the AppStackMutation object of the builder.
func (asu *AppStackUpdate) Mutation() *AppStackMutation {
	return asu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AppStackUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AppStackMutation](ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AppStackUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AppStackUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AppStackUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asu *AppStackUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appstack.Table, appstack.Columns, sqlgraph.NewFieldSpec(appstack.FieldID, field.TypeUint))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.CreatedAt(); ok {
		_spec.SetField(appstack.FieldCreatedAt, field.TypeTime, value)
	}
	if asu.mutation.CreatedAtCleared() {
		_spec.ClearField(appstack.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := asu.mutation.UpdatedAt(); ok {
		_spec.SetField(appstack.FieldUpdatedAt, field.TypeTime, value)
	}
	if asu.mutation.UpdatedAtCleared() {
		_spec.ClearField(appstack.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := asu.mutation.DeletedAt(); ok {
		_spec.SetField(appstack.FieldDeletedAt, field.TypeTime, value)
	}
	if asu.mutation.DeletedAtCleared() {
		_spec.ClearField(appstack.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := asu.mutation.AppName(); ok {
		_spec.SetField(appstack.FieldAppName, field.TypeString, value)
	}
	if asu.mutation.AppNameCleared() {
		_spec.ClearField(appstack.FieldAppName, field.TypeString)
	}
	if value, ok := asu.mutation.Environment(); ok {
		_spec.SetField(appstack.FieldEnvironment, field.TypeString, value)
	}
	if asu.mutation.EnvironmentCleared() {
		_spec.ClearField(appstack.FieldEnvironment, field.TypeString)
	}
	if value, ok := asu.mutation.Stack(); ok {
		_spec.SetField(appstack.FieldStack, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appstack.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AppStackUpdateOne is the builder for updating a single AppStack entity.
type AppStackUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppStackMutation
}

// SetCreatedAt sets the "created_at" field.
func (asuo *AppStackUpdateOne) SetCreatedAt(t time.Time) *AppStackUpdateOne {
	asuo.mutation.SetCreatedAt(t)
	return asuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asuo *AppStackUpdateOne) SetNillableCreatedAt(t *time.Time) *AppStackUpdateOne {
	if t != nil {
		asuo.SetCreatedAt(*t)
	}
	return asuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (asuo *AppStackUpdateOne) ClearCreatedAt() *AppStackUpdateOne {
	asuo.mutation.ClearCreatedAt()
	return asuo
}

// SetUpdatedAt sets the "updated_at" field.
func (asuo *AppStackUpdateOne) SetUpdatedAt(t time.Time) *AppStackUpdateOne {
	asuo.mutation.SetUpdatedAt(t)
	return asuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asuo *AppStackUpdateOne) SetNillableUpdatedAt(t *time.Time) *AppStackUpdateOne {
	if t != nil {
		asuo.SetUpdatedAt(*t)
	}
	return asuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (asuo *AppStackUpdateOne) ClearUpdatedAt() *AppStackUpdateOne {
	asuo.mutation.ClearUpdatedAt()
	return asuo
}

// SetDeletedAt sets the "deleted_at" field.
func (asuo *AppStackUpdateOne) SetDeletedAt(t time.Time) *AppStackUpdateOne {
	asuo.mutation.SetDeletedAt(t)
	return asuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (asuo *AppStackUpdateOne) SetNillableDeletedAt(t *time.Time) *AppStackUpdateOne {
	if t != nil {
		asuo.SetDeletedAt(*t)
	}
	return asuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (asuo *AppStackUpdateOne) ClearDeletedAt() *AppStackUpdateOne {
	asuo.mutation.ClearDeletedAt()
	return asuo
}

// SetAppName sets the "app_name" field.
func (asuo *AppStackUpdateOne) SetAppName(s string) *AppStackUpdateOne {
	asuo.mutation.SetAppName(s)
	return asuo
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (asuo *AppStackUpdateOne) SetNillableAppName(s *string) *AppStackUpdateOne {
	if s != nil {
		asuo.SetAppName(*s)
	}
	return asuo
}

// ClearAppName clears the value of the "app_name" field.
func (asuo *AppStackUpdateOne) ClearAppName() *AppStackUpdateOne {
	asuo.mutation.ClearAppName()
	return asuo
}

// SetEnvironment sets the "environment" field.
func (asuo *AppStackUpdateOne) SetEnvironment(s string) *AppStackUpdateOne {
	asuo.mutation.SetEnvironment(s)
	return asuo
}

// SetNillableEnvironment sets the "environment" field if the given value is not nil.
func (asuo *AppStackUpdateOne) SetNillableEnvironment(s *string) *AppStackUpdateOne {
	if s != nil {
		asuo.SetEnvironment(*s)
	}
	return asuo
}

// ClearEnvironment clears the value of the "environment" field.
func (asuo *AppStackUpdateOne) ClearEnvironment() *AppStackUpdateOne {
	asuo.mutation.ClearEnvironment()
	return asuo
}

// SetStack sets the "stack" field.
func (asuo *AppStackUpdateOne) SetStack(s string) *AppStackUpdateOne {
	asuo.mutation.SetStack(s)
	return asuo
}

// Mutation returns the AppStackMutation object of the builder.
func (asuo *AppStackUpdateOne) Mutation() *AppStackMutation {
	return asuo.mutation
}

// Where appends a list predicates to the AppStackUpdate builder.
func (asuo *AppStackUpdateOne) Where(ps ...predicate.AppStack) *AppStackUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AppStackUpdateOne) Select(field string, fields ...string) *AppStackUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AppStack entity.
func (asuo *AppStackUpdateOne) Save(ctx context.Context) (*AppStack, error) {
	return withHooks[*AppStack, AppStackMutation](ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AppStackUpdateOne) SaveX(ctx context.Context) *AppStack {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AppStackUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AppStackUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asuo *AppStackUpdateOne) sqlSave(ctx context.Context) (_node *AppStack, err error) {
	_spec := sqlgraph.NewUpdateSpec(appstack.Table, appstack.Columns, sqlgraph.NewFieldSpec(appstack.FieldID, field.TypeUint))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppStack.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appstack.FieldID)
		for _, f := range fields {
			if !appstack.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appstack.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.CreatedAt(); ok {
		_spec.SetField(appstack.FieldCreatedAt, field.TypeTime, value)
	}
	if asuo.mutation.CreatedAtCleared() {
		_spec.ClearField(appstack.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := asuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appstack.FieldUpdatedAt, field.TypeTime, value)
	}
	if asuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(appstack.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := asuo.mutation.DeletedAt(); ok {
		_spec.SetField(appstack.FieldDeletedAt, field.TypeTime, value)
	}
	if asuo.mutation.DeletedAtCleared() {
		_spec.ClearField(appstack.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := asuo.mutation.AppName(); ok {
		_spec.SetField(appstack.FieldAppName, field.TypeString, value)
	}
	if asuo.mutation.AppNameCleared() {
		_spec.ClearField(appstack.FieldAppName, field.TypeString)
	}
	if value, ok := asuo.mutation.Environment(); ok {
		_spec.SetField(appstack.FieldEnvironment, field.TypeString, value)
	}
	if asuo.mutation.EnvironmentCleared() {
		_spec.ClearField(appstack.FieldEnvironment, field.TypeString)
	}
	if value, ok := asuo.mutation.Stack(); ok {
		_spec.SetField(appstack.FieldStack, field.TypeString, value)
	}
	_node = &AppStack{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appstack.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
