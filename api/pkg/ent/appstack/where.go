// Code generated by ent, DO NOT EDIT.

package appstack

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chanzuckerberg/happy/api/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.AppStack {
	return predicate.AppStack(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.AppStack {
	return predicate.AppStack(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.AppStack {
	return predicate.AppStack(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.AppStack {
	return predicate.AppStack(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.AppStack {
	return predicate.AppStack(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.AppStack {
	return predicate.AppStack(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.AppStack {
	return predicate.AppStack(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.AppStack {
	return predicate.AppStack(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.AppStack {
	return predicate.AppStack(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldEQ(FieldDeletedAt, v))
}

// AppName applies equality check predicate on the "app_name" field. It's identical to AppNameEQ.
func AppName(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldEQ(FieldAppName, v))
}

// Environment applies equality check predicate on the "environment" field. It's identical to EnvironmentEQ.
func Environment(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldEQ(FieldEnvironment, v))
}

// Stack applies equality check predicate on the "stack" field. It's identical to StackEQ.
func Stack(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldEQ(FieldStack, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.AppStack {
	return predicate.AppStack(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.AppStack {
	return predicate.AppStack(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.AppStack {
	return predicate.AppStack(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.AppStack {
	return predicate.AppStack(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.AppStack {
	return predicate.AppStack(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.AppStack {
	return predicate.AppStack(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.AppStack {
	return predicate.AppStack(sql.FieldNotNull(FieldDeletedAt))
}

// AppNameEQ applies the EQ predicate on the "app_name" field.
func AppNameEQ(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldEQ(FieldAppName, v))
}

// AppNameNEQ applies the NEQ predicate on the "app_name" field.
func AppNameNEQ(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldNEQ(FieldAppName, v))
}

// AppNameIn applies the In predicate on the "app_name" field.
func AppNameIn(vs ...string) predicate.AppStack {
	return predicate.AppStack(sql.FieldIn(FieldAppName, vs...))
}

// AppNameNotIn applies the NotIn predicate on the "app_name" field.
func AppNameNotIn(vs ...string) predicate.AppStack {
	return predicate.AppStack(sql.FieldNotIn(FieldAppName, vs...))
}

// AppNameGT applies the GT predicate on the "app_name" field.
func AppNameGT(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldGT(FieldAppName, v))
}

// AppNameGTE applies the GTE predicate on the "app_name" field.
func AppNameGTE(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldGTE(FieldAppName, v))
}

// AppNameLT applies the LT predicate on the "app_name" field.
func AppNameLT(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldLT(FieldAppName, v))
}

// AppNameLTE applies the LTE predicate on the "app_name" field.
func AppNameLTE(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldLTE(FieldAppName, v))
}

// AppNameContains applies the Contains predicate on the "app_name" field.
func AppNameContains(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldContains(FieldAppName, v))
}

// AppNameHasPrefix applies the HasPrefix predicate on the "app_name" field.
func AppNameHasPrefix(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldHasPrefix(FieldAppName, v))
}

// AppNameHasSuffix applies the HasSuffix predicate on the "app_name" field.
func AppNameHasSuffix(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldHasSuffix(FieldAppName, v))
}

// AppNameIsNil applies the IsNil predicate on the "app_name" field.
func AppNameIsNil() predicate.AppStack {
	return predicate.AppStack(sql.FieldIsNull(FieldAppName))
}

// AppNameNotNil applies the NotNil predicate on the "app_name" field.
func AppNameNotNil() predicate.AppStack {
	return predicate.AppStack(sql.FieldNotNull(FieldAppName))
}

// AppNameEqualFold applies the EqualFold predicate on the "app_name" field.
func AppNameEqualFold(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldEqualFold(FieldAppName, v))
}

// AppNameContainsFold applies the ContainsFold predicate on the "app_name" field.
func AppNameContainsFold(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldContainsFold(FieldAppName, v))
}

// EnvironmentEQ applies the EQ predicate on the "environment" field.
func EnvironmentEQ(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldEQ(FieldEnvironment, v))
}

// EnvironmentNEQ applies the NEQ predicate on the "environment" field.
func EnvironmentNEQ(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldNEQ(FieldEnvironment, v))
}

// EnvironmentIn applies the In predicate on the "environment" field.
func EnvironmentIn(vs ...string) predicate.AppStack {
	return predicate.AppStack(sql.FieldIn(FieldEnvironment, vs...))
}

// EnvironmentNotIn applies the NotIn predicate on the "environment" field.
func EnvironmentNotIn(vs ...string) predicate.AppStack {
	return predicate.AppStack(sql.FieldNotIn(FieldEnvironment, vs...))
}

// EnvironmentGT applies the GT predicate on the "environment" field.
func EnvironmentGT(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldGT(FieldEnvironment, v))
}

// EnvironmentGTE applies the GTE predicate on the "environment" field.
func EnvironmentGTE(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldGTE(FieldEnvironment, v))
}

// EnvironmentLT applies the LT predicate on the "environment" field.
func EnvironmentLT(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldLT(FieldEnvironment, v))
}

// EnvironmentLTE applies the LTE predicate on the "environment" field.
func EnvironmentLTE(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldLTE(FieldEnvironment, v))
}

// EnvironmentContains applies the Contains predicate on the "environment" field.
func EnvironmentContains(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldContains(FieldEnvironment, v))
}

// EnvironmentHasPrefix applies the HasPrefix predicate on the "environment" field.
func EnvironmentHasPrefix(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldHasPrefix(FieldEnvironment, v))
}

// EnvironmentHasSuffix applies the HasSuffix predicate on the "environment" field.
func EnvironmentHasSuffix(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldHasSuffix(FieldEnvironment, v))
}

// EnvironmentIsNil applies the IsNil predicate on the "environment" field.
func EnvironmentIsNil() predicate.AppStack {
	return predicate.AppStack(sql.FieldIsNull(FieldEnvironment))
}

// EnvironmentNotNil applies the NotNil predicate on the "environment" field.
func EnvironmentNotNil() predicate.AppStack {
	return predicate.AppStack(sql.FieldNotNull(FieldEnvironment))
}

// EnvironmentEqualFold applies the EqualFold predicate on the "environment" field.
func EnvironmentEqualFold(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldEqualFold(FieldEnvironment, v))
}

// EnvironmentContainsFold applies the ContainsFold predicate on the "environment" field.
func EnvironmentContainsFold(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldContainsFold(FieldEnvironment, v))
}

// StackEQ applies the EQ predicate on the "stack" field.
func StackEQ(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldEQ(FieldStack, v))
}

// StackNEQ applies the NEQ predicate on the "stack" field.
func StackNEQ(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldNEQ(FieldStack, v))
}

// StackIn applies the In predicate on the "stack" field.
func StackIn(vs ...string) predicate.AppStack {
	return predicate.AppStack(sql.FieldIn(FieldStack, vs...))
}

// StackNotIn applies the NotIn predicate on the "stack" field.
func StackNotIn(vs ...string) predicate.AppStack {
	return predicate.AppStack(sql.FieldNotIn(FieldStack, vs...))
}

// StackGT applies the GT predicate on the "stack" field.
func StackGT(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldGT(FieldStack, v))
}

// StackGTE applies the GTE predicate on the "stack" field.
func StackGTE(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldGTE(FieldStack, v))
}

// StackLT applies the LT predicate on the "stack" field.
func StackLT(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldLT(FieldStack, v))
}

// StackLTE applies the LTE predicate on the "stack" field.
func StackLTE(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldLTE(FieldStack, v))
}

// StackContains applies the Contains predicate on the "stack" field.
func StackContains(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldContains(FieldStack, v))
}

// StackHasPrefix applies the HasPrefix predicate on the "stack" field.
func StackHasPrefix(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldHasPrefix(FieldStack, v))
}

// StackHasSuffix applies the HasSuffix predicate on the "stack" field.
func StackHasSuffix(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldHasSuffix(FieldStack, v))
}

// StackEqualFold applies the EqualFold predicate on the "stack" field.
func StackEqualFold(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldEqualFold(FieldStack, v))
}

// StackContainsFold applies the ContainsFold predicate on the "stack" field.
func StackContainsFold(v string) predicate.AppStack {
	return predicate.AppStack(sql.FieldContainsFold(FieldStack, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppStack) predicate.AppStack {
	return predicate.AppStack(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppStack) predicate.AppStack {
	return predicate.AppStack(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppStack) predicate.AppStack {
	return predicate.AppStack(func(s *sql.Selector) {
		p(s.Not())
	})
}
