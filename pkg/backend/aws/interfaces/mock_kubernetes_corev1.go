// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/client-go/kubernetes/typed/core/v1 (interfaces: CoreV1Interface,SecretInterface)

// Package interfaces is a generated GoMock package.
package interfaces

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	v11 "k8s.io/client-go/applyconfigurations/core/v1"
	v12 "k8s.io/client-go/kubernetes/typed/core/v1"
	rest "k8s.io/client-go/rest"
)

// MockKubernetesCoreV1API is a mock of CoreV1Interface interface.
type MockKubernetesCoreV1API struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesCoreV1APIMockRecorder
}

// MockKubernetesCoreV1APIMockRecorder is the mock recorder for MockKubernetesCoreV1API.
type MockKubernetesCoreV1APIMockRecorder struct {
	mock *MockKubernetesCoreV1API
}

// NewMockKubernetesCoreV1API creates a new mock instance.
func NewMockKubernetesCoreV1API(ctrl *gomock.Controller) *MockKubernetesCoreV1API {
	mock := &MockKubernetesCoreV1API{ctrl: ctrl}
	mock.recorder = &MockKubernetesCoreV1APIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesCoreV1API) EXPECT() *MockKubernetesCoreV1APIMockRecorder {
	return m.recorder
}

// ComponentStatuses mocks base method.
func (m *MockKubernetesCoreV1API) ComponentStatuses() v12.ComponentStatusInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComponentStatuses")
	ret0, _ := ret[0].(v12.ComponentStatusInterface)
	return ret0
}

// ComponentStatuses indicates an expected call of ComponentStatuses.
func (mr *MockKubernetesCoreV1APIMockRecorder) ComponentStatuses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComponentStatuses", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).ComponentStatuses))
}

// ConfigMaps mocks base method.
func (m *MockKubernetesCoreV1API) ConfigMaps(arg0 string) v12.ConfigMapInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigMaps", arg0)
	ret0, _ := ret[0].(v12.ConfigMapInterface)
	return ret0
}

// ConfigMaps indicates an expected call of ConfigMaps.
func (mr *MockKubernetesCoreV1APIMockRecorder) ConfigMaps(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigMaps", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).ConfigMaps), arg0)
}

// Endpoints mocks base method.
func (m *MockKubernetesCoreV1API) Endpoints(arg0 string) v12.EndpointsInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Endpoints", arg0)
	ret0, _ := ret[0].(v12.EndpointsInterface)
	return ret0
}

// Endpoints indicates an expected call of Endpoints.
func (mr *MockKubernetesCoreV1APIMockRecorder) Endpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Endpoints", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).Endpoints), arg0)
}

// Events mocks base method.
func (m *MockKubernetesCoreV1API) Events(arg0 string) v12.EventInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", arg0)
	ret0, _ := ret[0].(v12.EventInterface)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockKubernetesCoreV1APIMockRecorder) Events(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).Events), arg0)
}

// LimitRanges mocks base method.
func (m *MockKubernetesCoreV1API) LimitRanges(arg0 string) v12.LimitRangeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LimitRanges", arg0)
	ret0, _ := ret[0].(v12.LimitRangeInterface)
	return ret0
}

// LimitRanges indicates an expected call of LimitRanges.
func (mr *MockKubernetesCoreV1APIMockRecorder) LimitRanges(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LimitRanges", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).LimitRanges), arg0)
}

// Namespaces mocks base method.
func (m *MockKubernetesCoreV1API) Namespaces() v12.NamespaceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespaces")
	ret0, _ := ret[0].(v12.NamespaceInterface)
	return ret0
}

// Namespaces indicates an expected call of Namespaces.
func (mr *MockKubernetesCoreV1APIMockRecorder) Namespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespaces", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).Namespaces))
}

// Nodes mocks base method.
func (m *MockKubernetesCoreV1API) Nodes() v12.NodeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nodes")
	ret0, _ := ret[0].(v12.NodeInterface)
	return ret0
}

// Nodes indicates an expected call of Nodes.
func (mr *MockKubernetesCoreV1APIMockRecorder) Nodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nodes", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).Nodes))
}

// PersistentVolumeClaims mocks base method.
func (m *MockKubernetesCoreV1API) PersistentVolumeClaims(arg0 string) v12.PersistentVolumeClaimInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentVolumeClaims", arg0)
	ret0, _ := ret[0].(v12.PersistentVolumeClaimInterface)
	return ret0
}

// PersistentVolumeClaims indicates an expected call of PersistentVolumeClaims.
func (mr *MockKubernetesCoreV1APIMockRecorder) PersistentVolumeClaims(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentVolumeClaims", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).PersistentVolumeClaims), arg0)
}

// PersistentVolumes mocks base method.
func (m *MockKubernetesCoreV1API) PersistentVolumes() v12.PersistentVolumeInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PersistentVolumes")
	ret0, _ := ret[0].(v12.PersistentVolumeInterface)
	return ret0
}

// PersistentVolumes indicates an expected call of PersistentVolumes.
func (mr *MockKubernetesCoreV1APIMockRecorder) PersistentVolumes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PersistentVolumes", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).PersistentVolumes))
}

// PodTemplates mocks base method.
func (m *MockKubernetesCoreV1API) PodTemplates(arg0 string) v12.PodTemplateInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodTemplates", arg0)
	ret0, _ := ret[0].(v12.PodTemplateInterface)
	return ret0
}

// PodTemplates indicates an expected call of PodTemplates.
func (mr *MockKubernetesCoreV1APIMockRecorder) PodTemplates(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodTemplates", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).PodTemplates), arg0)
}

// Pods mocks base method.
func (m *MockKubernetesCoreV1API) Pods(arg0 string) v12.PodInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pods", arg0)
	ret0, _ := ret[0].(v12.PodInterface)
	return ret0
}

// Pods indicates an expected call of Pods.
func (mr *MockKubernetesCoreV1APIMockRecorder) Pods(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pods", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).Pods), arg0)
}

// RESTClient mocks base method.
func (m *MockKubernetesCoreV1API) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient.
func (mr *MockKubernetesCoreV1APIMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).RESTClient))
}

// ReplicationControllers mocks base method.
func (m *MockKubernetesCoreV1API) ReplicationControllers(arg0 string) v12.ReplicationControllerInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicationControllers", arg0)
	ret0, _ := ret[0].(v12.ReplicationControllerInterface)
	return ret0
}

// ReplicationControllers indicates an expected call of ReplicationControllers.
func (mr *MockKubernetesCoreV1APIMockRecorder) ReplicationControllers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicationControllers", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).ReplicationControllers), arg0)
}

// ResourceQuotas mocks base method.
func (m *MockKubernetesCoreV1API) ResourceQuotas(arg0 string) v12.ResourceQuotaInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceQuotas", arg0)
	ret0, _ := ret[0].(v12.ResourceQuotaInterface)
	return ret0
}

// ResourceQuotas indicates an expected call of ResourceQuotas.
func (mr *MockKubernetesCoreV1APIMockRecorder) ResourceQuotas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceQuotas", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).ResourceQuotas), arg0)
}

// Secrets mocks base method.
func (m *MockKubernetesCoreV1API) Secrets(arg0 string) v12.SecretInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secrets", arg0)
	ret0, _ := ret[0].(v12.SecretInterface)
	return ret0
}

// Secrets indicates an expected call of Secrets.
func (mr *MockKubernetesCoreV1APIMockRecorder) Secrets(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secrets", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).Secrets), arg0)
}

// ServiceAccounts mocks base method.
func (m *MockKubernetesCoreV1API) ServiceAccounts(arg0 string) v12.ServiceAccountInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceAccounts", arg0)
	ret0, _ := ret[0].(v12.ServiceAccountInterface)
	return ret0
}

// ServiceAccounts indicates an expected call of ServiceAccounts.
func (mr *MockKubernetesCoreV1APIMockRecorder) ServiceAccounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceAccounts", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).ServiceAccounts), arg0)
}

// Services mocks base method.
func (m *MockKubernetesCoreV1API) Services(arg0 string) v12.ServiceInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Services", arg0)
	ret0, _ := ret[0].(v12.ServiceInterface)
	return ret0
}

// Services indicates an expected call of Services.
func (mr *MockKubernetesCoreV1APIMockRecorder) Services(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Services", reflect.TypeOf((*MockKubernetesCoreV1API)(nil).Services), arg0)
}

// MockKubernetesSecretAPI is a mock of SecretInterface interface.
type MockKubernetesSecretAPI struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesSecretAPIMockRecorder
}

// MockKubernetesSecretAPIMockRecorder is the mock recorder for MockKubernetesSecretAPI.
type MockKubernetesSecretAPIMockRecorder struct {
	mock *MockKubernetesSecretAPI
}

// NewMockKubernetesSecretAPI creates a new mock instance.
func NewMockKubernetesSecretAPI(ctrl *gomock.Controller) *MockKubernetesSecretAPI {
	mock := &MockKubernetesSecretAPI{ctrl: ctrl}
	mock.recorder = &MockKubernetesSecretAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesSecretAPI) EXPECT() *MockKubernetesSecretAPIMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockKubernetesSecretAPI) Apply(arg0 context.Context, arg1 *v11.SecretApplyConfiguration, arg2 v10.ApplyOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockKubernetesSecretAPIMockRecorder) Apply(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockKubernetesSecretAPI)(nil).Apply), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockKubernetesSecretAPI) Create(arg0 context.Context, arg1 *v1.Secret, arg2 v10.CreateOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockKubernetesSecretAPIMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKubernetesSecretAPI)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockKubernetesSecretAPI) Delete(arg0 context.Context, arg1 string, arg2 v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKubernetesSecretAPIMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKubernetesSecretAPI)(nil).Delete), arg0, arg1, arg2)
}

// DeleteCollection mocks base method.
func (m *MockKubernetesSecretAPI) DeleteCollection(arg0 context.Context, arg1 v10.DeleteOptions, arg2 v10.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockKubernetesSecretAPIMockRecorder) DeleteCollection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockKubernetesSecretAPI)(nil).DeleteCollection), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockKubernetesSecretAPI) Get(arg0 context.Context, arg1 string, arg2 v10.GetOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKubernetesSecretAPIMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKubernetesSecretAPI)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockKubernetesSecretAPI) List(arg0 context.Context, arg1 v10.ListOptions) (*v1.SecretList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*v1.SecretList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockKubernetesSecretAPIMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKubernetesSecretAPI)(nil).List), arg0, arg1)
}

// Patch mocks base method.
func (m *MockKubernetesSecretAPI) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v10.PatchOptions, arg5 ...string) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockKubernetesSecretAPIMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockKubernetesSecretAPI)(nil).Patch), varargs...)
}

// Update mocks base method.
func (m *MockKubernetesSecretAPI) Update(arg0 context.Context, arg1 *v1.Secret, arg2 v10.UpdateOptions) (*v1.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockKubernetesSecretAPIMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockKubernetesSecretAPI)(nil).Update), arg0, arg1, arg2)
}

// Watch mocks base method.
func (m *MockKubernetesSecretAPI) Watch(arg0 context.Context, arg1 v10.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockKubernetesSecretAPIMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockKubernetesSecretAPI)(nil).Watch), arg0, arg1)
}
